//Correctness test

{
    print ""
    print "***********Basic************"
    print "Print - Passed!"
    if true {
        print "If / Else - Passed!"
    } else {
        print "If / Else - Failed!"
    }
}

{
    print ""
    print "***********Equality************"
    if 1 == 1 {
        print "Integer Equal - Passed!"
    } else {
        print "Integer Equal - Failed!"
    }
    if 1 != 2 {
        print "Integer Not Equal - Passed!"
    } else {
        print "Integer Not Equal - Failed!"
    }
}

{
    print ""
    print "***********Inequality************"
    if 1 < 2 {
        print "Integer Less Than - Passed!"
    } else {
        print "Integer Less Than - Failed!"
    }
}

{
    print ""
    print "***********Operations************"
    if 1 + 3 == 4 {
        print "Integer Addition: Passed!"
    } else {
        print "Integer Addition: Failed!"
    }
    if 1 - 3 == -2 {
        print "Integer Subtraction: Passed!"
    } else {
        print "Integer Subtraction: Failed!"
    }
    if -1 * 3 == -3 {
        print "Integer Multiplication: Passed!"
    } else {
        print "Integer Multiplication: Failed!"
    }
    if 12 / 5 == 2 {
        print "Integer Division: Passed!"
    } else {
        print "Integer Division: Failed!"
    }
    if 7 % 3 == 1 {
        print "Integer Modulus: Passed!"
    } else {
        print "Integer Modulus: Failed!"
    }
    if "dog" + "cat" == "dogcat" {
        print "String Concatenation: Passed!"
    } else {
        print "String Concatenation: Failed!"
    }
}

{
    print ""
    print "***********Variables************"
    a: int = 1
    if a == 1 {
        print "Declaring Integers: Passed!" 
    } else {
        print "Declaring Integers: Failed!" 
    } 
    b: string = "dog"
    if b == "dog" {
        print "Declaring Strings: Passed!"
    } else {
        print "Declaring Strings: Failed!"
    }

    c: int = 1
    d: int = 2
    c = d
    if c == 2 {
        print "Assigning integers: Passed!"
    } else {
        print "Assigning integers: Failed!"
    }

    e: int = 1
    f: int = 2
    e = f = 10
    if e == 10 and f == 10 {
        print "Cascade Assigning Integers: Passed!"
    } else {
        print "Cascade Assigning Integers: Failed!"
    }
}

{
    print ""
    print "***********Scopes************"
    a: int = 1
    {
        if a == 1 {
            print "Using Variables in Outer Scopes: Passed!" 
        } else {
            print "Using Variables in Outer Scopes: Failed!" 
        } 
        a: int = 2
        if a == 2 {
            print "Shadowing Variables in Outer Scopes: Passed!" 
        } else {
            print "Shadowing Variables in Outer Scopes: Failed!" 
        } 
    }
    if a == 1 {
        print "Popping Variables at Scope End: Passed!" 
    } else {
        print "Popping Variables at Scope End: Failed!" 
    }
    {{{
        if a == 1 {
            print "Using Variables in Outer Scopes (3 levels): Passed!" 
        } else {
            print "Using Variables in Outer Scopes (3 levels): Failed!" 
        } 
    }}}
}

{
    print ""
    print "***********For Loops************"
    j: int = 0
    for i: int = 0, i < 5, i = i + 1 {
        j = j + 1
    }
    if j == 5 {
        print "Initializer, Condition, Upate: Passed!"
    } else {
        print "Initializer, Condition, Upate: Failed!"
    }

    a: int = 0
    b: int = 0
    for , b < 5, b = b + 1 {
        a = a + 1
    }
    if a == 5 {
        print "No Initializer: Passed!"
    } else {
        print "No Initializer: Failed!"
    }

    c: int = 0
    for , c < 5, {
        c = c + 1
    }
    if c == 5 {
        print "No Initializer, No Update: Passed!"
    } else {
        print "No Initializer, No Update: Failed!"
    }

    d: int = 0
    while d < 5 {
        d = d + 1
    }
    if d == 5 {
        print "While: Passed!"
    } else {
        print "While: Failed!"
    }
}

{
    print ""
    print "***********Functions Return Primitives or Nil************"
    a: () -> = () -> {
        print "Zero Parameters / No Return: Passed!"
    }
    a()
    b: () -> int = () -> int {
        -> -1
    }
    if b() == -1 {
        print "Zero Parameters / Integer Return: Passed!"
    } else {
        print "Zero Parameters / Integer Return: Failed!"
    }
    c: (int) -> = (i: int) -> {
        if i == 2 {
            print "Integer Parameter: Passed!"
        } else {
            print "Integer Parameter: Failed!"
        }
    }
    c(2)
    fib: (int) -> int = (i: int) -> int {
        if i < 2 {
            -> i
        }
        -> fib(i - 1) + fib(i - 2)
    }
    if fib(10) == 55 {
        print "Recursion: Passed!"
    } else {
        print "Recursion: Failed!"
    }
}

{
    print ""
    print "***********Functions Returning Functions************"
    a: () -> () -> = () -> () -> {
        b: () -> = () -> {
            print "No Parameters / Nil Return: Passed!"
        }
        -> b
    }

    a()()

    c: () -> (int) -> int = () -> (int) -> int {
        d: (int) -> int = (n: int) -> int {
            -> n * 2
        }
        -> d
    }

    if c()(4) == 8 {
        print "One Parameter / Int Return: Passed!"
    } else {
        print "One Parameter / Int Return: Failed!"
    }
}

{
    print ""
    print "***********Cascading Calls************"

    a: () -> () -> () -> int = () -> () -> () -> int {
        b: () -> () -> int = () -> () -> int {
            c: () -> int = () -> int {
                -> 1
            }
            -> c
        }
        -> b
    }

    if a()()() == 1 {
        print "Triple calls: Passed!"
    } else {
        print "Triple calls: Failed!"
    }

    d: () -> (int) -> int = () -> (int) -> int {
        e: (int) -> int = (n: int) -> int {
            -> 2 * n
        }
        -> e
    }

    if d()(2) == 4 {
        print "Double calls: Passed!"
    } else {
        print "Double calls: Failed!"
    }
}

{
    print ""
    print "***********1 Depth Closures************"

    a: int = 0
    b: () -> = () -> {
        a = a + 1
    }

    b()

    if a == 1 {
        print "Open Upvalue 0: Passed!"
    } else {
        print "Open Upvalue 0: Failed!"
    }

    b()

    if a == 2 {
        print "Open Upvalue 1: Passed!"
    } else {
        print "Open Upvalue 1: Failed!"
    }

    var: string = "hello world"
    c: () -> string = () -> string {
        -> var + "!"
    }

    if c() == "hello world!" {
        print "Open upvalue 2: Passed!"
    } else {
        print "Open upvalue 2: Failed!"
    }

    if var == "hello world" {
        print "Open upvalue 3: Passed!"
    } else {
        print "Open upvalue 3: Failed!"
    }

}

{
    print ""
    print "***********2+ Depth Closures************"

    str1: string = "hello "
    str2: string = "world"
    a: () -> () -> string = () -> () -> string {
        b: () -> string = () -> string {
            -> str1 + str2
        }
        -> b
    }

    c: () -> string = a()

    if c() == "hello world" and a()() == "hello world" {
        print "Open upvalues, Depth 2: Passed!"
    } else {
        print "Open upvalues, Depth 2: Failed!"
    }

    x: () -> () -> () -> string = () -> () -> () -> string {
        y: () -> () -> string = () -> () -> string {
            z: () -> string = () -> string {
                -> str1 + str2
            }
            -> z
        }
        -> y
    }

    xx: () -> () -> string = x()
    yy: () -> string = xx()
    if yy() == "hello world" {
        print "Open upvalues, Depth 3: Passed!"
    } else {
        print "Open upvalues, Depth 3: Failed!"
    }

    if x()()() == "hello world" {
        print "Open upvalues, Depth 3, Cascade: Passed!"
    } else {
        print "Open upvalues, Depth 3, Cascade: Failed!"
    }
}

{
    print ""
    print "***********Closures: Closed Upvalues************"
    outer: () -> () -> string = () -> () -> string {
        x: string = "outside"
        inner: () -> string = () -> string{
            -> x
        }
        -> inner
    }

    closure: () -> string = outer()
    if closure() == "outside" {
        print "Closed Upvalues: Passed!"
    } else {
        print "Closed Upvalues: Failed!"
    }

    if outer()() == "outside" {
        print "Closed Upvalues, Cascade: Passed!"
    } else {
        print "Closed Upvalues, Cascade: Failed!"
    }
}

{
    print ""
    print "***********Classes************"
    Dog: class = class {
        name: string = "Mittens"
        age: int = 3
        length: float = 100.2
    }

    dog: Dog = Dog()
    if dog.name == "Mittens" {
        print "Get Property: Passed!"
    } else {
        print "Get Property: Failed!"
    }
    dog.name = "Bubbles"
    if dog.name == "Bubbles" {
        print "Set Property: Passed!"
    } else {
        print "Set Property: Failed!"
    }

    increment: () -> = () -> {
        dog.age = dog.age + 1
    }

    increment()

    if dog.age == 4 {
        print "Instance Upvalue: Passed!"
    } else {
        print "Instance Upvalue: Failed!"
    }

    outer: () -> () -> = () -> () -> {
        Cat: class = class {
            name: string = "Whiskey"
            age: int = 2
        }
        inner: () -> = () -> {
            c: Cat = Cat()
            if c.name == "Whiskey" and c.age == 2 {
                print "Class upvalue: Passed!"
            } else {
                print "Class upvalue: Failed!"
            } 
        } 
        -> inner
    }

    outer()()

    dog1: Dog = Dog()
    dog1.age = 5
    if dog1.age == 5 {
        print "Property Assignment: Passed!"
    } else {
        print "Property Assignment: Failed!"
    }
    dog2: Dog = Dog()
    dog1.age = dog2.age = 10
    if dog1.age == 10 and dog2.age == 10 {
        print "Cascade Property Assignment: Passed!"
    } else {
        print "Cascade Property Assignment: Failed!"
    }

    dog3: Dog = Dog()
    dog_age: (Dog) -> = (d: Dog) -> {
        d.age = 10
    }
    dog_age(dog3)
    if dog3.age == 10 {
        print "Instance as Parameter: Passed!"
    } else {
        print "Instance as Parameter: Failed!"
    }
    
}
