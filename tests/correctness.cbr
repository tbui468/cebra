//Correctness test

{
    print("")
    print("***********Basic************")
    print("Print - Passed!")
    if true {
        print("If / Else - Passed!")
    } else {
        print("If / Else - Failed!")
    }
}

{
    print("")
    print("***********Equality************")
    if 1 == 1 {
        print("Integer Equal - Passed!")
    } else {
        print("Integer Equal - Failed!")
    }
    if 1 != 2 {
        print("Integer Not Equal - Passed!")
    } else {
        print("Integer Not Equal - Failed!")
    }
}

{
    print("")
    print("***********Inequality************")
    if 1 < 2 {
        print("Integer Less Than - Passed!")
    } else {
        print("Integer Less Than - Failed!")
    }
}

{
    print("")
    print("***********Operations************")
    if 1 + 3 == 4 {
        print("Integer Addition: Passed!")
    } else {
        print("Integer Addition: Failed!")
    }
    if 1 - 3 == -2 {
        print("Integer Subtraction: Passed!")
    } else {
        print("Integer Subtraction: Failed!")
    }
    if -1 * 3 == -3 {
        print("Integer Multiplication: Passed!")
    } else {
        print("Integer Multiplication: Failed!")
    }
    if 12 / 5 == 2 {
        print("Integer Division: Passed!")
    } else {
        print("Integer Division: Failed!")
    }
    if 7 % 3 == 1 {
        print("Integer Modulus: Passed!")
    } else {
        print("Integer Modulus: Failed!")
    }
    if "dog" + "cat" == "dogcat" {
        print("String Concatenation: Passed!")
    } else {
        print("String Concatenation: Failed!")
    }
}

{
    print("")
    print("***********Variables************")
    a: int = 1
    ai := 1
    if a == 1 and ai == 1 {
        print("Declaring Integers: Passed!") 
    } else {
        print("Declaring Integers: Failed!") 
    } 
    b: string = "dog"
    bi := "dog"
    if b == "dog" and bi == "dog" {
        print("Declaring Strings: Passed!")
    } else {
        print("Declaring Strings: Failed!")
    }

    c: int = 1
    ci := 1
    di := 1
    d: int = 2
    ci = di = c = d 
    if c == 2 and ci == 2 and di == 2 {
        print("Assigning integers: Passed!")
    } else {
        print("Assigning integers: Failed!")
    }

    e: int = 1
    ei := 1
    f: int = 2
    fi := 1
    e = ei = f = fi = 10
    if e == 10 and f == 10 and ei == 10 and fi == 10 {
        print("Cascade Assigning Integers: Passed!")
    } else {
        print("Cascade Assigning Integers: Failed!")
    }
}

{
    print("")
    print("***********Scopes************")
    a: int = 1
    ai := 1
    {
        if a == 1 and ai == 1 {
            print("Using Variables in Outer Scopes: Passed!") 
        } else {
            print("Using Variables in Outer Scopes: Failed!") 
        } 
        a: int = 2
        ai := 2
        if a == 2 and ai == 2 {
            print("Shadowing Variables in Outer Scopes: Passed!") 
        } else {
            print("Shadowing Variables in Outer Scopes: Failed!") 
        } 
    }
    if a == 1 and ai == 1{
        print("Popping Variables at Scope End: Passed!") 
    } else {
        print("Popping Variables at Scope End: Failed!") 
    }
    {{{
        if a == 1 and ai == 1 {
            print("Using Variables in Outer Scopes (3 levels): Passed!") 
        } else {
            print("Using Variables in Outer Scopes (3 levels): Failed!") 
        } 
    }}}
}

{
    print("")
    print("***********For Loops************")
    j: int = 0
    ji := 0
    for i: int = 0, i < 5, i = i + 1 {
        j = j + 1
    }
    for i := 0, i < 5, i = i + 1 {
        ji = ji + 1
    }
    if j == 5 and ji == 5 {
        print("Initializer, Condition, Upate: Passed!")
    } else {
        print("Initializer, Condition, Upate: Failed!")
    }

    a: int = 0
    ai := 0
    b: int = 0
    bi := 0
    for , b < 5, b = b + 1 {
        a = a + 1
    }
    for , bi < 5, bi = bi + 1 {
        ai = ai + 1
    }
    if a == 5 and ai == 5 {
        print("No Initializer: Passed!")
    } else {
        print("No Initializer: Failed!")
    }

    c: int = 0
    ci := 0
    for , c < 5, {
        c = c + 1
    }
    for , ci < 5, {
        ci = ci + 1
    }
    if c == 5 and ci == 5 {
        print("No Initializer, No Update: Passed!")
    } else {
        print("No Initializer, No Update: Failed!")
    }

    d: int = 0
    di := 0
    while d < 5 {
        d = d + 1
    }
    while di < 5 {
        di = di + 1
    }
    if d == 5 and di == 5 {
        print("While: Passed!")
    } else {
        print("While: Failed!")
    }
}

{
    print("")
    print("***********Functions Return Primitives or Nil************")
    a: () -> = () -> {
        print("Zero Parameters / No Return: Passed!")
    }
    ai := () -> {
        print("Zero Parameters / No Return (Inferred): Passed!")
    }
    a()
    ai()

    b: () -> int = () -> int {
        -> -1
    }
    bi := () -> int {
        -> -1
    }
    if b() == -1 and bi() == -1 {
        print("Zero Parameters / Integer Return: Passed!")
    } else {
        print("Zero Parameters / Integer Return: Failed!")
    }

    c: (int) -> = (i: int) -> {
        if i == 2 {
            print("Integer Parameter: Passed!")
        } else {
            print("Integer Parameter: Failed!")
        }
    }
    ci := (i: int) -> {
        if i == 2 {
            print("Integer Parameter (Inferred): Passed!")
        } else {
            print("Integer Parameter (Inferred): Failed!")
        }
    }
    c(2)
    ci(2)

    fib: (int) -> int = (i: int) -> int {
        if i < 2 {
            -> i
        }
        -> fib(i - 1) + fib(i - 2)
    }
    fibi := (i: int) -> int {
        if i < 2 {
            -> i
        }
        -> fibi(i - 1) + fibi(i - 2)
    }
    if fib(10) == 55 and fibi(10) == 55 {
        print("Recursion: Passed!")
    } else {
        print("Recursion: Failed!")
    }
}

{
    print("")
    print("***********Functions Returning Functions************")
    a: () -> () -> = () -> () -> {
        b: () -> = () -> {
            print("No Parameters / Nil Return: Passed!")
        }
        -> b
    }
    ai := () -> () -> {
        bi := () -> {
            print("No Parameters / Nil Return (Inferred): Passed!")
        }
        -> bi
    }

    a()()
    ai()()

    c: () -> (int) -> int = () -> (int) -> int {
        d: (int) -> int = (n: int) -> int {
            -> n * 2
        }
        -> d
    }
    ci := () -> (int) -> int {
        di := (n: int) -> int {
            -> n * 2
        }
        -> di
    }

    if c()(4) == 8 and ci()(4) == 8 {
        print("One Parameter / Int Return: Passed!")
    } else {
        print("One Parameter / Int Return: Failed!")
    }
}

{
    print("")
    print("***********Functions as Function Parameters************")

    add: (int, int) -> int = (a: int, b: int) -> int {
        -> a + b
    }
    addi := (a: int, b: int) -> int {
        -> a + b
    }

    mul: (int, int) -> int = (a: int, b: int) -> int {
        -> a * b
    }
    muli := (a: int, b: int) -> int {
        -> a * b
    }

    fun: (int, int, (int, int)->int) -> int = (a: int, b: int, c: (int, int)->int) -> int {
        -> c(a, b)
    }
    funi := (a: int, b: int, c: (int, int)->int) -> int {
        -> c(a, b)
    }

    if fun(2, 3, add) == 5 and fun(5, 4, mul) == 20 
        and funi(2, 3, addi) == 5 and funi(5, 4, muli) == 20
    {
        print("Passing function as Argument: Passed!")    
    } else {
        print("Passing function as Argument: Failed!")    
    }
}

{
    print("")
    print("***********Cascading Calls************")

    a: () -> () -> () -> int = () -> () -> () -> int {
        b: () -> () -> int = () -> () -> int {
            c: () -> int = () -> int {
                -> 1
            }
            -> c
        }
        -> b
    }
    ai := () -> () -> () -> int {
        bi := () -> () -> int {
            ci := () -> int {
                -> 1
            }
            -> ci
        }
        -> bi
    }

    if a()()() == 1 and ai()()() == 1 {
        print("Triple calls: Passed!")
    } else {
        print("Triple calls: Failed!")
    }

    d: () -> (int) -> int = () -> (int) -> int {
        e: (int) -> int = (n: int) -> int {
            -> 2 * n
        }
        -> e
    }
    di := () -> (int) -> int {
        ei := (n: int) -> int {
            -> 2 * n
        }
        -> ei
    }

    if d()(2) == 4 and di()(2) == 4 {
        print("Double calls: Passed!")
    } else {
        print("Double calls: Failed!")
    }
}

{
    print("")
    print("***********Anonymous Functions************")

    op: (int, int, (int, int) -> int) -> int = (a: int, b: int, c: (int, int) -> int) -> int {
        -> c(a, b)
    }
    opi := (a: int, b: int, c: (int, int) -> int) -> int {
        -> c(a, b)
    }

    if op(3, 2, (a: int, b: int) -> int { -> a * b }) == 6 
       and opi(3, 2, (a: int, b: int) -> int { -> a * b }) == 6 
    {
        print("Anonymous Function: Passed!")
    } else {
        print("Anonymous Function: Failed!")
    }
}

{
    print("")
    print("***********1 Depth Closures************")

    a: int = 0
    ai := 0
    b: () -> = () -> {
        a = a + 1
    }
    bi := () -> {
        ai = ai + 1
    }

    b()
    bi()

    if a == 1 and ai == 1 {
        print("Open Upvalue 0: Passed!")
    } else {
        print("Open Upvalue 0: Failed!")
    }

    b()
    bi()

    if a == 2 and ai == 2 {
        print("Open Upvalue 1: Passed!")
    } else {
        print("Open Upvalue 1: Failed!")
    }

    var: string = "hello world"
    vari := "hello world"
    c: () -> string = () -> string {
        -> var + "!"
    }
    ci := () -> string {
        -> vari + "!"
    }

    if c() == "hello world!" and ci() == "hello world!" {
        print("Open upvalue 2: Passed!")
    } else {
        print("Open upvalue 2: Failed!")
    }

    if var == "hello world" and vari == "hello world" {
        print("Open upvalue 3: Passed!")
    } else {
        print("Open upvalue 3: Failed!")
    }

}

{
    print("")
    print("***********2+ Depth Closures************")

    str1: string = "hello "
    str2: string = "world"
    a: () -> () -> string = () -> () -> string {
        b: () -> string = () -> string {
            -> str1 + str2
        }
        -> b
    }
    c: () -> string = a()

    str1i := "hello "
    str2i := "world"
    ai := () -> () -> string {
        bi := () -> string {
            -> str1i + str2i
        }
        -> bi
    }
    ci := ai()

    if c() == "hello world" and a()() == "hello world" 
        and ci() == "hello world" and ai()() == "hello world" {
        print("Open upvalues, Depth 2: Passed!")
    } else {
        print("Open upvalues, Depth 2: Failed!")
    }

    x: () -> () -> () -> string = () -> () -> () -> string {
        y: () -> () -> string = () -> () -> string {
            z: () -> string = () -> string {
                -> str1 + str2
            }
            -> z
        }
        -> y
    }
    xx: () -> () -> string = x()
    yy: () -> string = xx()

    xi := () -> () -> () -> string {
        yi := () -> () -> string {
            zi := () -> string {
                -> str1i + str2i
            }
            -> zi
        }
        -> yi
    }
    xxi := x()
    yyi := xx()

    if yy() == "hello world" and yyi() == "hello world" {
        print("Open upvalues, Depth 3: Passed!")
    } else {
        print("Open upvalues, Depth 3: Failed!")
    }

    if x()()() == "hello world" and xi()()() == "hello world" {
        print("Open upvalues, Depth 3, Cascade: Passed!")
    } else {
        print("Open upvalues, Depth 3, Cascade: Failed!")
    }
}

{
    print("")
    print("***********Closures: Closed Upvalues************")
    outer: () -> () -> string = () -> () -> string {
        x: string = "outside"
        inner: () -> string = () -> string{
            -> x
        }
        -> inner
    }
    closure: () -> string = outer()

    outeri := () -> () -> string {
        x := "outside"
        inneri := () -> string{
            -> x
        }
        -> inneri
    }
    closurei := outeri()

    if closure() == "outside" and closurei() == "outside" {
        print("Closed Upvalues: Passed!")
    } else {
        print("Closed Upvalues: Failed!")
    }

    if outer()() == "outside" and outeri()() == "outside" {
        print("Closed Upvalues, Cascade: Passed!")
    } else {
        print("Closed Upvalues, Cascade: Failed!")
    }
}

{
    print("")
    print("***********Structs************")
    Dog: struct = struct {
        name: string = "Mittens"
        age: int = 3
        length: float = 100.2
    }
    Dogi := struct {
        namei := "Mittens"
        agei := 1 + 2
        lengthi := 100.2
    }

    dog: Dog = Dog()
    dogi := Dogi()
    if dog.name == "Mittens" and dogi.namei == "Mittens" {
        print("Get Property: Passed!")
    } else {
        print("Get Property: Failed!")
    }
    dog.name = "Bubbles"
    dogi.namei = "Bubbles"
    if dog.name == "Bubbles" and dogi.namei == "Bubbles" {
        print("Set Property: Passed!")
    } else {
        print("Set Property: Failed!")
    }

    increment: () -> = () -> {
        dog.age = dog.age + 1
    }
    incrementi := () -> {
        dogi.agei = dogi.agei + 1
    }

    increment()
    incrementi()

    if dog.age == 4 and dogi.agei == 4 {
        print("Instance Upvalue: Passed!")
    } else {
        print("Instance Upvalue: Failed!")
    }

    outer: () -> () -> = () -> () -> {
        Cat: struct = struct {
            name: string = "Whiskey"
            age: int = 2
        }
        inner: () -> = () -> {
            c: Cat = Cat()
            if c.name == "Whiskey" and c.age == 2 {
                print("Class upvalue: Passed!")
            } else {
                print("Class upvalue: Failed!")
            } 
        } 
        -> inner
    }
    outer()()
    dog1: Dog = Dog()
    dog1.age = 5

    outeri := () -> () -> {
        Cati := struct {
            namei := "Whiskey"
            agei := 2
        }
        inneri := () -> {
            ci := Cati()
            if ci.namei == "Whiskey" and ci.agei == 2 {
                print("Class upvalue (Inferred): Passed!")
            } else {
                print("Class upvalue (Inferred): Failed!")
            } 
        } 
        -> inneri
    }
    outeri()()
    dog1i := Dogi()
    dog1i.agei = 5

    if dog1.age == 5 and dog1i.agei == 5 {
        print("Property Assignment: Passed!")
    } else {
        print("Property Assignment: Failed!")
    }

    dog2: Dog = Dog()
    dog1.age = dog2.age = 10
    dog2i := Dogi()
    dog1i.agei = dog2i.agei = 10
    if dog1.age == 10 and dog2.age == 10 and
        dog1i.agei == 10 and dog2i.agei == 10 
    {
        print("Cascade Property Assignment: Passed!")
    } else {
        print("Cascade Property Assignment: Failed!")
    }

    dog3: Dog = Dog()
    dog_age: (Dog) -> = (d: Dog) -> {
        d.age = 10
    }
    dog_age(dog3)
    dog3i := Dogi()
    dog_agei := (d: Dogi) -> {
        d.agei = 10
    }
    dog_agei(dog3i)
    if dog3.age == 10 and dog3i.agei == 10 {
        print("Instance as Parameter: Passed!")
    } else {
        print("Instance as Parameter: Failed!")
    }

    dog_factory: () -> Dog = () -> Dog {
        d: Dog = Dog()
        d.age = 100
        -> d
    }
    dog_factoryi := () -> Dogi {
        d := Dogi()
        d.agei = 100
        -> d
    }
    if dog_factory().age == 100 and dog_factoryi().agei == 100 {
        print("Instance as Return: Passed!")
    } else {
        print("Instance as Return: Failed!")
    }

}

{
    print("")
    print("***********Native Functions************")
    print("print(): Passed!")
    a: float = clock()
    if a > -1.0 {
        print("clock(): Passed!")
    } else {
        print("clock(): Failed!")
    }
}

{
    print("")
    print("***********Lists************")
    a: List<int> = List<int>(-1)

    if a.size == 0 {
        print("Initialize List: Passed!")
    } else {
        print("Initialize List: Failed!")
    }

    a[0] = 0
    a[1] = 1
    a[0] = 10

    if a.size == 2 and a[0] == 10 and a[1] == 1 {
        print("Setting Value: Passed!")
    } else {
        print("Setting Value: Failed!")
    }

    a.size = 0
    if a.size == 0 {
        print("Setting size to Zero: Passed!")
    } else {
        print("Setting size to Zero: Failed!")
    }

    a.size = 2
    if a.size == 2 and a[0] == -1 and a[1] == -1 {
        print("Set Higher Size / Fill with Default: Passed!")
    } else {
        print("Set Higher Size / Fill with Default: Failed!")
    }

    a[10] = 10
    if a.size == 11 and a[10] == 10 and a[9] == -1 {
        print("Set Higher Index / Fill with Default: Passed!")
    } else {
        print("Set Higher Index / Fill with Default: Failed!")
    }

    a[5] = 33
    if a.size == 11 and a[10] == 10 and a[9] == -1 and a[5] == 33 {
        print("Set Lower Index: Passed!")
    } else {
        print("Set Lower Index: Failed!")
    }


    Dog: struct = struct {
        name: string = "Mittens"
        age: int = 5
    }

    a: List<Dog> = List<Dog>(Dog())
    d: Dog = Dog()
    d.name = "Bubbles"
    a[0] = d
    a.size = 2

    if a[0].name == "Bubbles" and a[1].name == "Mittens" {
        print("Structs in List: Passed!")
    } else {
        print("Structs in List: Failed!")
    }

}

{
    print("")
    print("***********In Keyword************")
    list: List<int> = List<int>(-1)

    if !(10 in list) {
        print("Empty Int List: Passed!")
    } else {
        print("Empty Int List: Failed!")
    } 

    list[list.size] = 1
    list[list.size] = 2

    if 2 in list {
        print("Int List: Passed!")
    } else {
        print("Int List: Failed!")
    }
}

{
    print("")
    print("***********Maps************")
    map: Map<int> = Map<int>(-1)

    if map["two"] == -1 {
        print("Invalid Key: Passed!")
    } else {
        print("Invalid Key: Failed!")
    }

    if !("two" in map.keys) {
        print("Map Keys List: Passed!")
    } else {
        print("Map Keys List: Failed!")
    }

    map["one"] = 1
    map["dog"] = 123

    if map["one"] == 1 and map["dog"] == 123 {
        print("Access: Passed!")
    } else {
        print("Access: Failed!")
    }

    map["one"] = 3

    if map["one"] == 3 {
        print("Set Value: Passed!")
    } else {
        print("Set Value: Failed!")
    }

    if map.values.size == 2 and map.keys.size == 2 {
        print("Value and Key List Sizes: Passed!")
    } else {
        print("Value and Key List Sizes: Failed!")
    }
}

{
    print("")
    print("***********Nils For Instances************")

    Dog: struct = struct {
        name: string = "Bubbles"
        age: int = 2
        friend: Dog = nil
    }

    dog0: Dog = Dog()
    dog1: Dog = Dog()
    dog1.name = "Mittens"
    dog2: Dog = Dog()
    dog2.name = "Boxy"
    dog0.friend = dog1
    dog1.friend = dog2
    dog_nil: Dog = nil

    if dog0.friend.friend.friend == nil and dog_nil == nil{
        print("Initialized to Nil: Passed!")
    } else {
        print("Initialized to Nil: Failed!")
    }

    if dog0.friend.friend.name == dog1.friend.name {
        print("Instance Inside Instance: Passed!")
    } else {
        print("Instance Inside Instance: Failed!")
    }

    dog0 = nil
    if dog0 == nil {
        print("Set Instance to Nil: Passed!")
    } else {
        print("Set Instance to Nil: Failed!")
    }
}

{
    print("")
    print("***********Struct Inheritance************")

    Animal: struct = struct {
        class: string = "Mammal"
    }

    Bird: struct < Animal = struct < Animal {
        class: string = "Avian"
    }

    Zebra: struct < Animal = struct < Animal {
        name: string = "adfs"
    }

    bird: Bird = Bird()
    zebra: Zebra = Zebra()

    if bird.class == "Avian" {
        print("Overwrite property: Passed!")
    } else {
        print("Overwrite property: Failed!")
    }

    if zebra.class == "Mammal" {
        print("Inherit property: Passed!")
    } else {
        print("Inherit property: Failed!")
    }

}

{

    print("")
    print("***********Duck Typing************")
    Animal: struct = struct {
        class: string = "Mammal"
    }

    Bird: struct < Animal = struct < Animal {
        class: string = "Avian"
        name: string = "Flappy"
    }

    fun: (Animal) -> = (a: Animal) -> {
        a.class = "Reptile"
    }

    make_bird: () -> Animal = () -> Animal {
        b: Bird = Bird()
        -> b
    }


    a: Bird = Bird()
    fun(a)

    if a.name == "Flappy" and a.class == "Reptile" {
        print("Function Modify Struct Instance: Passed!")
    } else {
        print("Function Modify Struct Instance: Failed!")
    }

    if make_bird().class == "Avian" {
        print("Return Substruct: Passed!")
    } else {
        print("Return Substruct: Failed!")
    }

}
