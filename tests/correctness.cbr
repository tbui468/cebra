//Correctness test
start_time := clock()

//this won't work!  Need to make it a preprocessor directive so that code is NOT parsed/compiled
basic := true
equality := true
inequality := true
operations := true
variables := true
scopes := true
loops := true
functions_returning_primitives := true
functions_returning_functions := true
functions_as_parameters := true
cascading_calls := true
anonymous_functions := true
closures_depth_1 := true
closures_depth_2 := true
closed_upvalues := true
structs := true
native_functions := true
lists := true
in_keyword := true
maps := true
nils_for_instances := true
struct_inheritance := true
struct_typing := true
for_each_loop := true
get_char := true
get_string_size := true
lists_maps_in_structs := true
enums := true
cast_to_string := true
cast_to_int := true
cast_to_float := true
cast_to_bool := true
cast_struct_instances := true
when_statement := true
sequences := true

passed := List<string>()
failed := List<string>()

add_failed := (msg: string) -> {
    failed[failed.size] = msg
}
add_passed := (msg: string) -> {
    passed[passed.size] = msg
}


Token :: enum {
    plus
    minus
    star
    slash
}

Animal :: struct {
    class: string = "Mammal"
}

Bird :: struct < Animal {
    class: string = "Avian"
    name: string = "Flappy"
}

Zebra :: struct < Animal {
    name: string = "adfs"
}

Lizard :: struct < Animal {
    class: string = "Reptile"
    name: string = "Lizzy"
    scale_color: string = "Green"
}

Canine :: struct < Animal {
    class: string = "Canine"
}

Dog :: struct < Canine {
    name: string = "Mittens"
    age: int = 3
    length: float = 100.2
    friend: Dog = nil
    list: List<int> = nil
    map: Map<int> = nil 
}

make_dog :: () -> Dog {
    d := Dog()
    d.name = "Mittens"
    d.age = 3
    d.length = 100.2
    d.friend = nil
    d.list = List<int>()
    d.map = Map<int>()
    -> d
}

if basic {
    print("-Basic")
    if true {
        add_passed("If / Else - Passed!")
    } else {
        add_failed("If / Else - Failed!")
    }
}


if equality {
    print("-Equality")
    if 1 == 1 {
        add_passed("Integer Equal - Passed!")
    } else {
        add_failed("Integer Equal - Failed!")
    }
    if 1 != 2 {
        add_passed("Integer Not Equal - Passed!")
    } else {
        add_failed("Integer Not Equal - Failed!")
    }
}

if inequality {
    print("-Inequality")
    if 1 < 2 {
        add_passed("Integer Less Than - Passed!")
    } else {
        add_failed("Integer Less Than - Failed!")
    }
}

if operations {
    print("-Operations")
    if 1 + 3 == 4 {
        add_passed("Integer Addition: Passed!")
    } else {
        add_failed("Integer Addition: Failed!")
    }

    if 1 - 3 == -2 {
        add_passed("Integer Subtraction: Passed!")
    } else {
        add_failed("Integer Subtraction: Failed!")
    }
    if -1 * 3 == -3 {
        add_passed("Integer Multiplication: Passed!")
    } else {
        add_failed("Integer Multiplication: Failed!")
    }
    if 12 / 5 == 2 {
        add_passed("Integer Division: Passed!")
    } else {
        add_failed("Integer Division: Failed!")
    }
    if 7 % 3 == 1 {
        add_passed("Integer Modulus: Passed!")
    } else {
        add_failed("Integer Modulus: Failed!")
    }
    if "dog" + "cat" == "dogcat" {
        add_passed("String Concatenation: Passed!")
    } else {
        add_failed("String Concatenation: Failed!")
    }
}

if variables {
    
    print("-Variables")
    a: int = 1
    ai := 1
    if a == 1 and ai == 1 {
        add_passed("Declaring Integers: Passed!") 
    } else {
        add_failed("Declaring Integers: Failed!") 
    } 
    b: string = "dog"
    bi := "dog"
    if b == "dog" and bi == "dog" {
        add_passed("Declaring Strings: Passed!")
    } else {
        add_failed("Declaring Strings: Failed!")
    }

    c: int = 1
    ci := 1
    di := 1
    d: int = 2
    ci = di = c = d 
    if c == 2 and ci == 2 and di == 2 {
        add_passed("Assigning integers: Passed!")
    } else {
        add_failed("Assigning integers: Failed!")
    }

    e: int = 1
    ei := 1
    f: int = 2
    fi := 1
    e = ei = f = fi = 10
    if e == 10 and f == 10 and ei == 10 and fi == 10 {
        add_passed("Cascade Assigning Integers: Passed!")
    } else {
        add_failed("Cascade Assigning Integers: Failed!")
    }
}

if scopes {
    
    print("-Scopes")
    a: int = 1
    ai := 1
    {
        if a == 1 and ai == 1 {
            add_passed("Using Variables in Outer Scopes: Passed!") 
        } else {
            add_failed("Using Variables in Outer Scopes: Failed!") 
        } 
        a: int = 2
        ai := 2
        if a == 2 and ai == 2 {
            add_passed("Shadowing Variables in Outer Scopes: Passed!") 
        } else {
            add_failed("Shadowing Variables in Outer Scopes: Failed!") 
        } 
    }
    if a == 1 and ai == 1{
        add_passed("Popping Variables at Scope End: Passed!") 
    } else {
        add_failed("Popping Variables at Scope End: Failed!") 
    }
    {{{
        if a == 1 and ai == 1 {
            add_passed("Using Variables in Outer Scopes (3 levels): Passed!") 
        } else {
            add_failed("Using Variables in Outer Scopes (3 levels): Failed!") 
        } 
    }}}
}

if loops {
    
    print("-Loops")
    j: int = 0
    ji := 0
    for i: int = 0, i < 5, i = i + 1 {
        j = j + 1
    }
    for i := 0, i < 5, i = i + 1 {
        ji = ji + 1
    }
    if j == 5 and ji == 5 {
        add_passed("Initializer, Condition, Update: Passed!")
    } else {
        add_failed("Initializer, Condition, Update: Failed!")
    }

    a: int = 0
    ai := 0
    b: int = 0
    bi := 0
    for , b < 5, b = b + 1 {
        a = a + 1
    }
    for , bi < 5, bi = bi + 1 {
        ai = ai + 1
    }
    if a == 5 and ai == 5 {
        add_passed("No Initializer: Passed!")
    } else {
        add_failed("No Initializer: Failed!")
    }

    c: int = 0
    ci := 0
    for , c < 5, {
        c = c + 1
    }
    for , ci < 5, {
        ci = ci + 1
    }
    if c == 5 and ci == 5 {
        add_passed("No Initializer, No Update: Passed!")
    } else {
        add_failed("No Initializer, No Update: Failed!")
    }

    d: int = 0
    di := 0
    while d < 5 {
        d = d + 1
    }
    while di < 5 {
        di = di + 1
    }
    if d == 5 and di == 5 {
        add_passed("While: Passed!")
    } else {
        add_failed("While: Failed!")
    }
}

if functions_returning_primitives {
    
    print("-Functions Returning Primitives")
    a1 := () -> {
        add_passed("Zero Parameters / No Return: Passed!")
    }
    a1()

    b1 :: () -> int {
        -> -1
    }
    if b1() == -1 {
        add_passed("Zero Parameters / Integer Return: Passed!")
    } else {
        add_failed("Zero Parameters / Integer Return: Failed!")
    }

    c1 := (i: int) -> {
        if i == 2 {
            add_passed("Integer Parameter: Passed!")
        } else {
            add_failed("Integer Parameter: Failed!")
        }
    }
    c1(2)

    fib :: (i: int) -> int {
        if i < 2 {
            -> i
        }
        -> fib(i - 1) + fib(i - 2)
    }
    if fib(10) == 55 {
        add_passed("Recursion: Passed!")
    } else {
        add_failed("Recursion: Failed!")
    }
}

if functions_returning_functions{
    
    print("-Functions Returning Functions")
    a := () -> () -> {
        b := () -> {
            add_passed("No Parameters / Nil Return: Passed!")
        }
        -> b
    }
    ai := () -> () -> {
        bi := () -> {
            add_passed("No Parameters / Nil Return (Inferred): Passed!")
        }
        -> bi
    }

    a()()
    ai()()

    c :: () -> (int) -> int {
        d :: (n: int) -> int {
            -> n * 2
        }
        -> d
    }
    ci :: () -> (int) -> int {
        di :: (n: int) -> int {
            -> n * 2
        }
        -> di
    }

    if c()(4) == 8 and ci()(4) == 8 {
        add_passed("One Parameter / Int Return: Passed!")
    } else {
        add_failed("One Parameter / Int Return: Failed!")
    }
}

if functions_as_parameters {
    
    print("-Functions as Parameters")

    add :: (a: int, b: int) -> int {
        -> a + b
    }
    addi :: (a: int, b: int) -> int {
        -> a + b
    }

    mul :: (a: int, b: int) -> int {
        -> a * b
    }
    muli :: (a: int, b: int) -> int {
        -> a * b
    }

    fun :: (a: int, b: int, c: (int, int)->int) -> int {
        -> c(a, b)
    }
    funi :: (a: int, b: int, c: (int, int)->int) -> int {
        -> c(a, b)
    }

    if fun(2, 3, add) == 5 and fun(5, 4, mul) == 20 
        and funi(2, 3, addi) == 5 and funi(5, 4, muli) == 20
    {
        add_passed("Passing function as Argument: Passed!")    
    } else {
        add_failed("Passing function as Argument: Failed!")    
    }
}

if cascading_calls {
    
    print("-Cascading Calls")

    a2 :: () -> () -> () -> int {
        b2 :: () -> () -> int {
            c2 :: () -> int {
                -> 1
            }
            -> c2
        }
        -> b2
    }

    if a2()()() == 1 {
        add_passed("Triple calls: Passed!")
    } else {
        add_failed("Triple calls: Failed!")
    }

    d2 :: () -> (int) -> int {
        e2 :: (n: int) -> int {
            -> 2 * n
        }
        -> e2
    }

    if d2()(2) == 4 {
        add_passed("Double calls: Passed!")
    } else {
        add_failed("Double calls: Failed!")
    }
}

if anonymous_functions {
    
    print("-Anonymous Functions")

    op :: (a: int, b: int, c: (int, int) -> int) -> int {
        -> c(a, b)
    }

    if op(3, 2, (a: int, b: int) -> int { -> a * b }) == 6 {
        add_passed("Anonymous Function: Passed!")
    } else {
        add_failed("Anonymous Function: Failed!")
    }
}

if closures_depth_1 {
    
    print("-Closures Depth 1")

    a: int = 0
    b3 := () -> {
        a = a + 1
    }

    b3()

    if a == 1 {
        add_passed("Open Upvalue 0: Passed!")
    } else {
        add_failed("Open Upvalue 0: Failed!")
    }

    b3()

    if a == 2 {
        add_passed("Open Upvalue 1: Passed!")
    } else {
        add_failed("Open Upvalue 1: Failed!")
    }

    var: string = "hello world"
    vari := "hello world"
    c3 := () -> string {
        -> var + "!"
    }

    if c3() == "hello world!" {
        add_passed("Open upvalue 2: Passed!")
    } else {
        add_failed("Open upvalue 2: Failed!")
    }

    if var == "hello world" and vari == "hello world" {
        add_passed("Open upvalue 3: Passed!")
    } else {
        add_failed("Open upvalue 3: Failed!")
    }

}

if closures_depth_2 {
    
    print("-Closures Depth 2")

    str1: string = "hello "
    str2: string = "world"
    a4 := () -> () -> string {
        b4 := () -> string {
            -> str1 + str2
        }
        -> b4
    }
    c4: () -> string = a4()

    str1i := "hello "
    str2i := "world"

    if c4() == "hello world" and a4()() == "hello world" {
        add_passed("Open upvalues, Depth 2: Passed!")
    } else {
        add_failed("Open upvalues, Depth 2: Failed!")
    }

    x := () -> () -> () -> string {
        y := () -> () -> string {
            z := () -> string {
                -> str1 + str2
            }
            -> z
        }
        -> y
    }
    xx: () -> () -> string = x()
    yy: () -> string = xx()

    if yy() == "hello world" {
        add_passed("Open upvalues, Depth 3: Passed!")
    } else {
        add_failed("Open upvalues, Depth 3: Failed!")
    }

    if x()()() == "hello world" {
        add_passed("Open upvalues, Depth 3, Cascade: Passed!")
    } else {
        add_failed("Open upvalues, Depth 3, Cascade: Failed!")
    }
}

if closed_upvalues {
    
    print("-Closed Upvalues")
    outer1 :: () -> () -> string {
        x: string = "outside"
        inner1 := () -> string{
            -> x
        }
        -> inner1
    }
    closure: () -> string = outer1()

    if closure() == "outside" {
        add_passed("Closed Upvalues: Passed!")
    } else {
        add_failed("Closed Upvalues: Failed!")
    }

    if outer1()() == "outside" {
        add_passed("Closed Upvalues, Cascade: Passed!")
    } else {
        add_failed("Closed Upvalues, Cascade: Failed!")
    }
}

if structs {
    
    print("-Structs")

    dog: Dog = make_dog()
    if dog.name == "Mittens" {
        add_passed("Get Property: Passed!")
    } else {
        add_failed("Get Property: Failed!")
    }
    dog.name = "Bubbles"
    if dog.name == "Bubbles" {
        add_passed("Set Property: Passed!")
    } else {
        add_failed("Set Property: Failed!")
    }

    increment := () -> {
        dog.age = dog.age + 1
    }

    increment()

    if dog.age == 4 {
        add_passed("Instance Upvalue: Passed!")
    } else {
        add_failed("Instance Upvalue: Failed!")
    }

    outer := () -> () -> {
        Cat :: struct {
            name: string = "Whiskey"
            age: int = 2
        }
        make_cat :: () -> Cat {
            c := Cat()
            c.name = "Whiskey"
            c.age = 2
            -> c
        }
        inner := () -> {
            c: Cat = make_cat()
            if c.name == "Whiskey" and c.age == 2 {
                add_passed("Class upvalue: Passed!")
            } else {
                add_failed("Class upvalue: Failed!")
            } 
        } 
        -> inner
    }
    outer()()
    dog1: Dog = make_dog()
    dog1.age = 5


    if dog1.age == 5 {
        add_passed("Property Assignment: Passed!")
    } else {
        add_failed("Property Assignment: Failed!")
    }

    dog2: Dog = make_dog()
    dog1.age = dog2.age = 10
    if dog1.age == 10 and dog2.age == 10 {
        add_passed("Cascade Property Assignment: Passed!")
    } else {
        add_failed("Cascade Property Assignment: Failed!")
    }

    dog3: Dog = make_dog()
    dog_age :: (d: Dog) -> {
        d.age = 10
    }
    dog_age(dog3)
    if dog3.age == 10 {
        add_passed("Instance as Parameter: Passed!")
    } else {
        add_failed("Instance as Parameter: Failed!")
    }

    dog_factory :: () -> Dog {
        d: Dog = make_dog()
        d.age = 100
        -> d
    }
    if dog_factory().age == 100 {
        add_passed("Instance as Return: Passed!")
    } else {
        add_failed("Instance as Return: Failed!")
    }

}

if native_functions {
    
    print("-Native Functions")
    a: float = clock()
    if a > -1.0 {
        add_passed("clock(): Passed!")
    } else {
        add_failed("clock(): Failed!")
    }
}

if lists {
    
    print("-Lists")
    a: List<int> = List<int>()

    if a.size == 0 {
        add_passed("Initialize List: Passed!")
    } else {
        add_failed("Initialize List: Failed!")
    }

    a[0] = 0
    a[1] = 1
    a[0] = 10

    if a.size == 2 and a[0] == 10 and a[1] == 1 {
        add_passed("Setting Value: Passed!")
    } else {
        add_failed("Setting Value: Failed!")
    }

    a.size = 0
    if a.size == 0 {
        add_passed("Setting size to Zero: Passed!")
    } else {
        add_failed("Setting size to Zero: Failed!")
    }

    a.size = 2
    if a.size == 2 and a[0] == nil and a[1] == nil {
        add_passed("Set Higher Size / Fill with Default: Passed!")
    } else {
        add_failed("Set Higher Size / Fill with Default: Failed!")
    }

    a[10] = 10
    if a.size == 11 and a[10] == 10 and a[9] == nil {
        add_passed("Set Higher Index / Fill with Default: Passed!")
    } else {
        add_failed("Set Higher Index / Fill with Default: Failed!")
    }

    a[5] = 33
    if a.size == 11 and a[10] == 10 and a[9] == nil and a[5] == 33 {
        add_passed("Set Lower Index: Passed!")
    } else {
        add_failed("Set Lower Index: Failed!")
    }

    b: List<Dog> = List<Dog>()
    d: Dog = make_dog()
    d.name = "Bubbles"
    b[0] = d
    b.size = 2

    if b[0].name == "Bubbles" and b[1] == nil {
        add_passed("Structs in List: Passed!")
    } else {
        add_failed("Structs in List: Failed!")
    }

}

if in_keyword {
    
    print("-In Keyword")
    list: List<int> = List<int>()

    if !(10 in list) {
        add_passed("Empty Int List: Passed!")
    } else {
        add_failed("Empty Int List: Failed!")
    } 

    list[list.size] = 1
    list[list.size] = 2

    if 2 in list {
        add_passed("Int List: Passed!")
    } else {
        add_failed("Int List: Failed!")
    }
}

if maps {
    
    print("-Maps")
    map: Map<int> = Map<int>()

    if map["two"] == nil {
        add_passed("Invalid Key: Passed!")
    } else {
        add_failed("Invalid Key: Failed!")
    }

    if !("two" in map.keys) {
        add_passed("Map Keys List: Passed!")
    } else {
        add_failed("Map Keys List: Failed!")
    }

    map["one"] = 1
    map["dog"] = 123

    if map["one"] == 1 and map["dog"] == 123 {
        add_passed("Access: Passed!")
    } else {
        add_failed("Access: Failed!")
    }

    map["one"] = 3

    if map["one"] == 3 {
        add_passed("Set Value: Passed!")
    } else {
        add_failed("Set Value: Failed!")
    }

    if map.values.size == 2 and map.keys.size == 2 {
        add_passed("Value and Key List Sizes: Passed!")
    } else {
        add_failed("Value and Key List Sizes: Failed!")
    }
}

if nils_for_instances {
    
    print("-Nils For Instances")

    dog0: Dog = make_dog()
    dog1: Dog = make_dog()
    dog1.name = "Mittens"
    dog2: Dog = make_dog()
    dog2.name = "Boxy"
    dog0.friend = dog1
    dog1.friend = dog2
    dog_nil: Dog = nil

    if dog0.friend.friend.friend == nil and dog_nil == nil{
        add_passed("Initialized to Nil: Passed!")
    } else {
        add_failed("Initialized to Nil: Failed!")
    }

    if dog0.friend.friend.name == dog1.friend.name {
        add_passed("Instance Inside Instance: Passed!")
    } else {
        add_failed("Instance Inside Instance: Failed!")
    }

    dog0 = nil
    if dog0 == nil {
        add_passed("Set Instance to Nil: Passed!")
    } else {
        add_failed("Set Instance to Nil: Failed!")
    }
}

if struct_inheritance{
    
    print("-Struct Inheritance")

    bird: Bird = Bird()
    zebra: Zebra = Zebra()

    if bird.class == "Avian" {
        add_passed("Overwrite property: Passed!")
    } else {
        add_failed("Overwrite property: Failed!")
    }

    if zebra.class == "Mammal" {
        add_passed("Inherit property: Passed!")
    } else {
        add_failed("Inherit property: Failed!")
    }

}

if struct_typing {
    
    print("-Struct Typing")

    fun2 :: (a: Animal) -> {
        a.class = "Reptile"
    }

    make_bird :: () -> Animal {
        b: Bird = Bird()
        -> b as Animal
    }


    a: Animal = Bird() as Animal
    fun2(a)
    b := a as Bird

    if b.name == "Flappy" and b.class == "Reptile" {
        add_passed("Function Modify Struct Instance: Passed!")
    } else {
        add_failed("Function Modify Struct Instance: Failed!")
    }

    if make_bird().class == "Avian" {
        add_passed("Return Substruct: Passed!")
    } else {
        add_failed("Return Substruct: Failed!")
    }

}

if for_each_loop {
    print("-For Each Loop")

    a := List<int>()
    for i := 0, i < 10, i = i + 1 {
        a[i] = 1
    }

    sum := 0
    foreach i: int in a {
        sum = sum + i
    }

    if sum == 10 {
        add_passed("For Each with Int List: Passed!")
    } else {
        add_failed("For Each with Int List: Failed!")
    }

    map := Map<int>()
    map["one"] = 1
    map["two"] = 2

    out := "" 
    foreach i: string in map.keys {
        out = out + i
    }
    map_sum := 0
    foreach i: int in map.values {
        map_sum = map_sum + i
    }
    if (out == "onetwo" or out == "twoone") and map_sum == 3 {
        add_passed("For Each with Map Keys/Values: Passed!")
    } else {
        add_failed("For Each with Map Keys/Values: Failed!")
    }
}

if get_char {
    print("-Get Char in String")

    a := "Hello world!"
    if a[0] == "H" and a[11] == "!" {
        add_passed("Get Char: Passed!")
    } else {
        add_failed("Get Char: Failed!")
    }


    dog1 := make_dog()
    dog2 := make_dog()
    dog1.friend = dog2
    dog1.friend.name = "Bubbles"

    if dog1.name[0] == "M" and dog1.friend.name[0] == "B" {
        add_passed("Get Char When String is Property: Passed!")
    } else {
        add_failed("Get Char When String is Property: Failed!")
    }

}

if get_string_size {
    print("-Set String Size")

    a := "Hello world!"

    if a.size == 12 {
        add_passed("Get String Size: Passed!")
    } else {
        add_failed("Get String Size: Failed!")
    }


    dog1 := make_dog()
    dog1.name = "Mit"
    dog2 := make_dog()
    dog1.friend = dog2
    dog2.name = "Mitts"

    if dog1.name.size == 3 and dog1.friend.name.size == 5 {
        add_passed("Get String As Property: Passed!")
    } else {
        add_failed("Get String As Property: Failed!")
    }
    
}

if lists_maps_in_structs {
    print("-Lists / Maps in Structs")

    dog := make_dog()
    dog1 := make_dog()
    dog1.name = "Bubbles"
    dog.friend = dog1

    dog.map["one"] = 1
    dog.map["two"] = 343
    dog.friend.map["one"] = 2232

    if dog.map.keys.size == 2 and dog.friend.map.keys.size == 1 {
        add_passed("Maps Are Unique in Struct Instances: Passed!")
    } else {
        add_failed("Maps Are Unique in Struct Instances: Failed!")
    }


    dog.list[0] = 0
    dog.list[1] = 1
    dog1.list[0] = 0

    if dog.list.size == 2 and dog.friend.list.size == 1 {
        add_passed("Lists Are Unique in Struct Instances: Passed!")
    } else {
        add_failed("Lists Are Unique in Struct Instances: Failed!")
    }
}

if enums {
    print("-Enums")

    a: Token = Token.plus
    ai := Token.plus

    if a == Token.plus and ai == Token.plus {
        add_passed("Assigning Variables to Enum Constant: Passed!")
    } else {
        add_failed("Assigning Variables to Enum Constant: Failed!")
    }

    b: Token = Token.minus
    bi := Token.minus
    b = Token.plus
    bi = Token.plus
    if a == b and ai == bi {
        add_passed("Reassigning Variables to Enum Constant: Passed!")
    } else {
        add_failed("Reassigning Variables to Enum Constant: Failed!")
    }

    if Token.plus < Token.minus {
        add_passed("Comparing Enum Constants: Passed!")
    } else {
        add_failed("Comparing Enum Constants: Failed!")
    }

    if Token.slash > Token.minus {
        add_passed("Comparing Enum Constants: Passed!")
    } else {
        add_failed("Comparing Enum Constants: Failed!")
    }
}

if cast_to_string {
    print("-Cast to String")

    if 4 as string == "4" and -32 as string == "-32" {
        add_passed("Cast Integer to String: Passed!")
    } else {
        add_failed("Cast Integer to String: Failed!")
    }

    fp := -2.3 as string
    if fp[0] == "-" and fp[1] == "2" and fp[2] == "." and fp[3] == "3" {
        add_passed("Cast Float to String: Passed!")
    } else {
        add_failed("Cast Float to String: Failed!")
    }

    if true as string == "true" and false as string == "false" {
        add_passed("Cast Boolean to String: Passed!")
    } else {
        add_failed("Cast Boolean to String: Failed!")
    }

    if nil as string == "nil" {
        add_passed("Cast Nil to String: Passed!")
    } else {
        add_passed("Cast Nil to String: Failed!")
    }
}

if cast_to_int {
    //string, float, bool
    print("-Cast to Int")
    if "4" as int == 4 and "-32" as int == -32 and "-2.3" as int == -2 {
        add_passed("Cast String to Integer: Passed!")
    } else {
        add_failed("Cast String to Integer: Failed!")
    }

    if -2.3 as int == -2 and 23.2 as int == 23 {
        add_passed("Cast Float to Int: Passed!")
    } else {
        add_failed("Cast Float to Int: Failed!")
    }

    if true as int == 1 and false as int == 0 {
        add_passed("Cast Boolean to Int: Passed!")
    } else {
        add_failed("Cast Boolean to Int: Failed!")
    }
}
if cast_to_float {
    //string, int, bool
    print("-Cast to Float")

    if "23.2" as float < 23.25 and "23.2" as float > 23.19 {
        add_passed("Cast String to Float: Passed!")
    } else {
        add_failed("Cast String to Float: Failed!")
    }

    if 23 as float < 23.5 and 23 as float > 22.9 {
        add_passed("Cast Int to Float: Passed!")    
    } else {
        add_failed("Cast Int to Float: Failed!")    
    }

    t := true as float
    f := false as float
    if (t > .5 and t < 1.5) and (f > -0.5 and f < 0.5) {
        add_passed("Cast Bool to Float: Passed!")    
    } else {
        add_failed("Cast Bool to Float: Failed!")    
    }
}

if cast_to_bool {
    //string, int, float
    print("-Cast to Bool")

    if !("" as bool) and ("adf" as bool) {
        add_passed("Cast String to Bool: Passed!")
    } else {
        add_failed("Cast String to Bool: Failed!")
    }

    if !(0 as bool) and 1 as bool {
        add_passed("Cast Int to Bool: Passed!")
    } else {
        add_failed("Cast Int to Bool: Failed!")
    }

    if !(0.0 as bool) and 1.0 as bool {
        add_passed("Cast Float to Bool: Passed!")
    } else {
        add_failed("Cast Float to Bool: Failed!")
    }
}

if cast_struct_instances {
    print("-Cast Struct Instances")

    canine := Canine()
    if (canine as Animal) as Canine != nil {
        add_passed("Cast Structure Instance Down - Valid: Passed!")
    } else {
        add_failed("Cast Structure Instance Down - Valid: Failed!")
    }

    animal := Animal()
    if canine as Dog == nil and animal as Canine == nil and animal as Dog == nil {
        add_passed("Cast Structure Down - Nil: Passed!")
    } else {
        add_failed("Cast Structure Down - Nil: Failed!")
    }

    dog := Dog()
    liz := Lizard()
    if dog as Animal != nil and dog as Canine != nil and liz as Animal != nil {
        add_passed("Cast Structure Instance Up: Passed!") 
    } else {
        add_failed("Cast Structure Instance Up: Failed!") 
    }

}

if when_statement {
    print("-When Statements")
    a := 1
    b := 2
    when b {
        is 1 { a = a + 1}
        is 2 { a = a + 2 }
        else { a = a + 3}
    }

    if a == 3 {
        add_passed("When Statement - Regular Case : Passed!")
    } else {
        add_failed("When Statement - Regular Case : Failed!")
    }

    c := 1
    d := 99
    when d {
        is 1 { c = c + 1}
        is 2 { c = c + 2 }
        else { c = c + 3}
    }

    if c == 4 {
        add_passed("When Statement - Else Case : Passed!")
    } else {
        add_failed("When Statement - Else Case : Failed!")
    }

    e := 1
    f := 99
    when f {
        is 1 { e = e + 1}
        is 2 { e = e + 2 }
    }

    if e == 1 {
        add_passed("When Statement - No Case : Passed!")
    } else {
        add_failed("When Statement - No Case : Failed!")
    }
}


if sequences {
    print("-Multi-declarations on a single line")
    a: int, b: int = 1, 2
    if a + b == 3 {
        add_passed("Two declarations, explicit types: Passed!")
    } else {
        add_failed("Two declarations, explicit types: Failed!")
    }
    c, d := 4, 5
    if c + d == 9 {
        add_passed("Two declarations, same implicit types: Passed!")
    } else {
        add_failed("Two declarations, same implicit types: Failed!")
    }
    e, f := "dog", true
    if e == "dog" and f {
        add_passed("Two declarations, different implicit types: Passed!")
    } else {
        add_failed("Two declarations, different implicit types: Failed!")
    }

    dog2: Dog, tok2: Token = Dog(), Token.plus
    if dog2.name == "Mittens" and tok2 == Token.plus {
        add_passed("Two declarations, different explicit custom types: Passed!")
    } else {
        add_failed("Two declarations, different explicit custom types: Failed!")
    }
    dog, tok := Dog(), Token.plus
    if dog.name == "Mittens" and tok == Token.plus {
        add_passed("Two declarations, different implicit custom types: Passed!")
    } else {
        add_failed("Two declarations, different implicit custom types: Failed!")
    }

    g := 2
    h: int, g = 5, 6
    if g == 6 and h == 5 {
        add_passed("One assignment, One declaration: Passed!")
    } else {
        add_failed("One assignment, One declaration: Failed!")
    }

    //lists and maps
    list, map := List<Dog>(), Map<int>()
    list[0], list[1], map["one"] = Dog(), Dog(), 20
    list[0].friend, list[1].friend = list[1], list[0]
    list[0].friend.name, list[1].friend.name = "friend 1", "friend 0"

    if list[0].name == "friend 0" and list[1].name == "friend 1" {
        add_passed("Sequence with Lists Holding Structs: Passed")
    } else {
        add_failed("Sequence with Lists Holding Structs: Failed")
    }

    a, dog3: Dog = 99, Dog()
    dog4 := Dog()
    dog3.name, dog3.class, dog3.friend = "Bubbles", "Mammal", dog4
    dog3.friend.name, dog3.friend.friend = "Boxy", dog3

    if dog3.friend.name == "Boxy" and dog3.friend.friend.name == dog3.name {
        add_passed("Sequence with Structs and Properties: Passed")
    } else {
        add_failed("Sequence with Structs and Properties: Failed")
    }

}

print("----------------------------------")
print("Total Tests:")
print(passed.size + failed.size)
print("Passed:")
print(passed.size)
print("Failed:")
print(failed.size)
for i := 0, i < failed.size, i = i + 1 {
    print(failed[i])
}

print("time:")
print(clock() - start_time)
