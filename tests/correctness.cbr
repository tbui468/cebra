//Correctness test

//this won't work!  Need to make it a preprocessor directive so that code is NOT parsed/compiled
basic := true
equality := true
inequality := true
operations := true
variables := true
scopes := true
loops := true
functions_returning_primitives := true
functions_returning_functions := true
functions_as_parameters := true
cascading_calls := true
anonymous_functions := true
closures_depth_1 := true
closures_depth_2 := true
closed_upvalues := true
structs := true
native_functions := true
lists := true
in_keyword := true
maps := true
nils_for_instances := true
struct_inheritance := true
duck_typing := true
cast_to_string := true
for_each_loop := true
get_set_char := true
set_string_size := true
lists_maps_in_structs := true
enums := true

passed := List<string>()
failed := List<string>()

add_failed := (msg: string) -> {
    failed[failed.size] = msg
}
add_passed := (msg: string) -> {
    passed[passed.size] = msg
}

if basic {
    print("-Basic")
    if true {
        add_passed("If / Else - Passed!")
    } else {
        add_failed("If / Else - Failed!")
    }
}

if equality {
    print("-Equality")
    if 1 == 1 {
        add_passed("Integer Equal - Passed!")
    } else {
        add_failed("Integer Equal - Failed!")
    }
    if 1 != 2 {
        add_passed("Integer Not Equal - Passed!")
    } else {
        add_failed("Integer Not Equal - Failed!")
    }
}

if inequality {
    print("-Inequality")
    if 1 < 2 {
        add_passed("Integer Less Than - Passed!")
    } else {
        add_failed("Integer Less Than - Failed!")
    }
}

if operations {
    print("-Operations")
    if 1 + 3 == 4 {
        add_passed("Integer Addition: Passed!")
    } else {
        add_failed("Integer Addition: Failed!")
    }

    if 1 - 3 == -2 {
        add_passed("Integer Subtraction: Passed!")
    } else {
        add_failed("Integer Subtraction: Failed!")
    }
    if -1 * 3 == -3 {
        add_passed("Integer Multiplication: Passed!")
    } else {
        add_failed("Integer Multiplication: Failed!")
    }
    if 12 / 5 == 2 {
        add_passed("Integer Division: Passed!")
    } else {
        add_failed("Integer Division: Failed!")
    }
    if 7 % 3 == 1 {
        add_passed("Integer Modulus: Passed!")
    } else {
        add_failed("Integer Modulus: Failed!")
    }
    if "dog" + "cat" == "dogcat" {
        add_passed("String Concatenation: Passed!")
    } else {
        add_failed("String Concatenation: Failed!")
    }
}

if variables {
    
    print("-Variables")
    a: int = 1
    ai := 1
    if a == 1 and ai == 1 {
        add_passed("Declaring Integers: Passed!") 
    } else {
        add_failed("Declaring Integers: Failed!") 
    } 
    b: string = "dog"
    bi := "dog"
    if b == "dog" and bi == "dog" {
        add_passed("Declaring Strings: Passed!")
    } else {
        add_failed("Declaring Strings: Failed!")
    }

    c: int = 1
    ci := 1
    di := 1
    d: int = 2
    ci = di = c = d 
    if c == 2 and ci == 2 and di == 2 {
        add_passed("Assigning integers: Passed!")
    } else {
        add_failed("Assigning integers: Failed!")
    }

    e: int = 1
    ei := 1
    f: int = 2
    fi := 1
    e = ei = f = fi = 10
    if e == 10 and f == 10 and ei == 10 and fi == 10 {
        add_passed("Cascade Assigning Integers: Passed!")
    } else {
        add_failed("Cascade Assigning Integers: Failed!")
    }
}

if scopes {
    
    print("-Scopes")
    a: int = 1
    ai := 1
    {
        if a == 1 and ai == 1 {
            add_passed("Using Variables in Outer Scopes: Passed!") 
        } else {
            add_failed("Using Variables in Outer Scopes: Failed!") 
        } 
        a: int = 2
        ai := 2
        if a == 2 and ai == 2 {
            add_passed("Shadowing Variables in Outer Scopes: Passed!") 
        } else {
            add_failed("Shadowing Variables in Outer Scopes: Failed!") 
        } 
    }
    if a == 1 and ai == 1{
        add_passed("Popping Variables at Scope End: Passed!") 
    } else {
        add_failed("Popping Variables at Scope End: Failed!") 
    }
    {{{
        if a == 1 and ai == 1 {
            add_passed("Using Variables in Outer Scopes (3 levels): Passed!") 
        } else {
            add_failed("Using Variables in Outer Scopes (3 levels): Failed!") 
        } 
    }}}
}

if loops {
    
    print("-Loops")
    j: int = 0
    ji := 0
    for i: int = 0, i < 5, i = i + 1 {
        j = j + 1
    }
    for i := 0, i < 5, i = i + 1 {
        ji = ji + 1
    }
    if j == 5 and ji == 5 {
        add_passed("Initializer, Condition, Update: Passed!")
    } else {
        add_failed("Initializer, Condition, Update: Failed!")
    }

    a: int = 0
    ai := 0
    b: int = 0
    bi := 0
    for , b < 5, b = b + 1 {
        a = a + 1
    }
    for , bi < 5, bi = bi + 1 {
        ai = ai + 1
    }
    if a == 5 and ai == 5 {
        add_passed("No Initializer: Passed!")
    } else {
        add_failed("No Initializer: Failed!")
    }

    c: int = 0
    ci := 0
    for , c < 5, {
        c = c + 1
    }
    for , ci < 5, {
        ci = ci + 1
    }
    if c == 5 and ci == 5 {
        add_passed("No Initializer, No Update: Passed!")
    } else {
        add_failed("No Initializer, No Update: Failed!")
    }

    d: int = 0
    di := 0
    while d < 5 {
        d = d + 1
    }
    while di < 5 {
        di = di + 1
    }
    if d == 5 and di == 5 {
        add_passed("While: Passed!")
    } else {
        add_failed("While: Failed!")
    }
}

if functions_returning_primitives {
    
    print("-Functions Returning Primitives")
    a: () -> = () -> {
        add_passed("Zero Parameters / No Return: Passed!")
    }
    ai := () -> {
        add_passed("Zero Parameters / No Return (Inferred): Passed!")
    }
    a()
    ai()

    b: () -> int = () -> int {
        -> -1
    }
    bi := () -> int {
        -> -1
    }
    if b() == -1 and bi() == -1 {
        add_passed("Zero Parameters / Integer Return: Passed!")
    } else {
        add_failed("Zero Parameters / Integer Return: Failed!")
    }

    c: (int) -> = (i: int) -> {
        if i == 2 {
            add_passed("Integer Parameter: Passed!")
        } else {
            add_failed("Integer Parameter: Failed!")
        }
    }
    ci := (i: int) -> {
        if i == 2 {
            add_passed("Integer Parameter (Inferred): Passed!")
        } else {
            add_failed("Integer Parameter (Inferred): Failed!")
        }
    }
    c(2)
    ci(2)

    fib: (int) -> int = (i: int) -> int {
        if i < 2 {
            -> i
        }
        -> fib(i - 1) + fib(i - 2)
    }
    fibi := (i: int) -> int {
        if i < 2 {
            -> i
        }
        -> fibi(i - 1) + fibi(i - 2)
    }
    if fib(10) == 55 and fibi(10) == 55 {
        add_passed("Recursion: Passed!")
    } else {
        add_failed("Recursion: Failed!")
    }
}

if functions_returning_functions{
    
    print("-Functions Returning Functions")
    a: () -> () -> = () -> () -> {
        b: () -> = () -> {
            add_passed("No Parameters / Nil Return: Passed!")
        }
        -> b
    }
    ai := () -> () -> {
        bi := () -> {
            add_passed("No Parameters / Nil Return (Inferred): Passed!")
        }
        -> bi
    }

    a()()
    ai()()

    c: () -> (int) -> int = () -> (int) -> int {
        d: (int) -> int = (n: int) -> int {
            -> n * 2
        }
        -> d
    }
    ci := () -> (int) -> int {
        di := (n: int) -> int {
            -> n * 2
        }
        -> di
    }

    if c()(4) == 8 and ci()(4) == 8 {
        add_passed("One Parameter / Int Return: Passed!")
    } else {
        add_failed("One Parameter / Int Return: Failed!")
    }
}

if functions_as_parameters {
    
    print("-Functions as Parameters")

    add: (int, int) -> int = (a: int, b: int) -> int {
        -> a + b
    }
    addi := (a: int, b: int) -> int {
        -> a + b
    }

    mul: (int, int) -> int = (a: int, b: int) -> int {
        -> a * b
    }
    muli := (a: int, b: int) -> int {
        -> a * b
    }

    fun: (int, int, (int, int)->int) -> int = (a: int, b: int, c: (int, int)->int) -> int {
        -> c(a, b)
    }
    funi := (a: int, b: int, c: (int, int)->int) -> int {
        -> c(a, b)
    }

    if fun(2, 3, add) == 5 and fun(5, 4, mul) == 20 
        and funi(2, 3, addi) == 5 and funi(5, 4, muli) == 20
    {
        add_passed("Passing function as Argument: Passed!")    
    } else {
        add_failed("Passing function as Argument: Failed!")    
    }
}

if cascading_calls {
    
    print("-Cascading Calls")

    a: () -> () -> () -> int = () -> () -> () -> int {
        b: () -> () -> int = () -> () -> int {
            c: () -> int = () -> int {
                -> 1
            }
            -> c
        }
        -> b
    }
    ai := () -> () -> () -> int {
        bi := () -> () -> int {
            ci := () -> int {
                -> 1
            }
            -> ci
        }
        -> bi
    }

    if a()()() == 1 and ai()()() == 1 {
        add_passed("Triple calls: Passed!")
    } else {
        add_failed("Triple calls: Failed!")
    }

    d: () -> (int) -> int = () -> (int) -> int {
        e: (int) -> int = (n: int) -> int {
            -> 2 * n
        }
        -> e
    }
    di := () -> (int) -> int {
        ei := (n: int) -> int {
            -> 2 * n
        }
        -> ei
    }

    if d()(2) == 4 and di()(2) == 4 {
        add_passed("Double calls: Passed!")
    } else {
        add_failed("Double calls: Failed!")
    }
}

if anonymous_functions{
    
    print("-Anonymous Functions")

    op: (int, int, (int, int) -> int) -> int = (a: int, b: int, c: (int, int) -> int) -> int {
        -> c(a, b)
    }
    opi := (a: int, b: int, c: (int, int) -> int) -> int {
        -> c(a, b)
    }

    if op(3, 2, (a: int, b: int) -> int { -> a * b }) == 6 
       and opi(3, 2, (a: int, b: int) -> int { -> a * b }) == 6 
    {
        add_passed("Anonymous Function: Passed!")
    } else {
        add_failed("Anonymous Function: Failed!")
    }
}

if closures_depth_1 {
    
    print("-Closures Depth 1")

    a: int = 0
    ai := 0
    b: () -> = () -> {
        a = a + 1
    }
    bi := () -> {
        ai = ai + 1
    }

    b()
    bi()

    if a == 1 and ai == 1 {
        add_passed("Open Upvalue 0: Passed!")
    } else {
        add_failed("Open Upvalue 0: Failed!")
    }

    b()
    bi()

    if a == 2 and ai == 2 {
        add_passed("Open Upvalue 1: Passed!")
    } else {
        add_failed("Open Upvalue 1: Failed!")
    }

    var: string = "hello world"
    vari := "hello world"
    c: () -> string = () -> string {
        -> var + "!"
    }
    ci := () -> string {
        -> vari + "!"
    }

    if c() == "hello world!" and ci() == "hello world!" {
        add_passed("Open upvalue 2: Passed!")
    } else {
        add_failed("Open upvalue 2: Failed!")
    }

    if var == "hello world" and vari == "hello world" {
        add_passed("Open upvalue 3: Passed!")
    } else {
        add_failed("Open upvalue 3: Failed!")
    }

}

if closures_depth_2 {
    
    print("-Closures Depth 2")

    str1: string = "hello "
    str2: string = "world"
    a: () -> () -> string = () -> () -> string {
        b: () -> string = () -> string {
            -> str1 + str2
        }
        -> b
    }
    c: () -> string = a()

    str1i := "hello "
    str2i := "world"
    ai := () -> () -> string {
        bi := () -> string {
            -> str1i + str2i
        }
        -> bi
    }
    ci := ai()

    if c() == "hello world" and a()() == "hello world" 
        and ci() == "hello world" and ai()() == "hello world" {
        add_passed("Open upvalues, Depth 2: Passed!")
    } else {
        add_failed("Open upvalues, Depth 2: Failed!")
    }

    x: () -> () -> () -> string = () -> () -> () -> string {
        y: () -> () -> string = () -> () -> string {
            z: () -> string = () -> string {
                -> str1 + str2
            }
            -> z
        }
        -> y
    }
    xx: () -> () -> string = x()
    yy: () -> string = xx()

    xi := () -> () -> () -> string {
        yi := () -> () -> string {
            zi := () -> string {
                -> str1i + str2i
            }
            -> zi
        }
        -> yi
    }
    xxi := x()
    yyi := xx()

    if yy() == "hello world" and yyi() == "hello world" {
        add_passed("Open upvalues, Depth 3: Passed!")
    } else {
        add_failed("Open upvalues, Depth 3: Failed!")
    }

    if x()()() == "hello world" and xi()()() == "hello world" {
        add_passed("Open upvalues, Depth 3, Cascade: Passed!")
    } else {
        add_failed("Open upvalues, Depth 3, Cascade: Failed!")
    }
}

if closed_upvalues {
    
    print("-Closed Upvalues")
    outer: () -> () -> string = () -> () -> string {
        x: string = "outside"
        inner: () -> string = () -> string{
            -> x
        }
        -> inner
    }
    closure: () -> string = outer()

    outeri := () -> () -> string {
        x := "outside"
        inneri := () -> string{
            -> x
        }
        -> inneri
    }
    closurei := outeri()

    if closure() == "outside" and closurei() == "outside" {
        add_passed("Closed Upvalues: Passed!")
    } else {
        add_failed("Closed Upvalues: Failed!")
    }

    if outer()() == "outside" and outeri()() == "outside" {
        add_passed("Closed Upvalues, Cascade: Passed!")
    } else {
        add_failed("Closed Upvalues, Cascade: Failed!")
    }
}

if structs {
    
    print("-Structs")
    Dog: struct = struct {
        name: string = "Mittens"
        age: int = 3
        length: float = 100.2
    }
    Dogi := struct {
        namei := "Mittens"
        agei := 1 + 2
        lengthi := 100.2
    }

    dog: Dog = Dog()
    dogi := Dogi()
    if dog.name == "Mittens" and dogi.namei == "Mittens" {
        add_passed("Get Property: Passed!")
    } else {
        add_failed("Get Property: Failed!")
    }
    dog.name = "Bubbles"
    dogi.namei = "Bubbles"
    if dog.name == "Bubbles" and dogi.namei == "Bubbles" {
        add_passed("Set Property: Passed!")
    } else {
        add_failed("Set Property: Failed!")
    }

    increment: () -> = () -> {
        dog.age = dog.age + 1
    }
    incrementi := () -> {
        dogi.agei = dogi.agei + 1
    }

    increment()
    incrementi()

    if dog.age == 4 and dogi.agei == 4 {
        add_passed("Instance Upvalue: Passed!")
    } else {
        add_failed("Instance Upvalue: Failed!")
    }

    outer: () -> () -> = () -> () -> {
        Cat: struct = struct {
            name: string = "Whiskey"
            age: int = 2
        }
        inner: () -> = () -> {
            c: Cat = Cat()
            if c.name == "Whiskey" and c.age == 2 {
                add_passed("Class upvalue: Passed!")
            } else {
                add_failed("Class upvalue: Failed!")
            } 
        } 
        -> inner
    }
    outer()()
    dog1: Dog = Dog()
    dog1.age = 5

    outeri := () -> () -> {
        Cati := struct {
            namei := "Whiskey"
            agei := 2
        }
        inneri := () -> {
            ci := Cati()
            if ci.namei == "Whiskey" and ci.agei == 2 {
                add_passed("Class upvalue (Inferred): Passed!")
            } else {
                add_failed("Class upvalue (Inferred): Failed!")
            } 
        } 
        -> inneri
    }
    outeri()()
    dog1i := Dogi()
    dog1i.agei = 5

    if dog1.age == 5 and dog1i.agei == 5 {
        add_passed("Property Assignment: Passed!")
    } else {
        add_failed("Property Assignment: Failed!")
    }

    dog2: Dog = Dog()
    dog1.age = dog2.age = 10
    dog2i := Dogi()
    dog1i.agei = dog2i.agei = 10
    if dog1.age == 10 and dog2.age == 10 and
        dog1i.agei == 10 and dog2i.agei == 10 
    {
        add_passed("Cascade Property Assignment: Passed!")
    } else {
        add_failed("Cascade Property Assignment: Failed!")
    }

    dog3: Dog = Dog()
    dog_age: (Dog) -> = (d: Dog) -> {
        d.age = 10
    }
    dog_age(dog3)
    dog3i := Dogi()
    dog_agei := (d: Dogi) -> {
        d.agei = 10
    }
    dog_agei(dog3i)
    if dog3.age == 10 and dog3i.agei == 10 {
        add_passed("Instance as Parameter: Passed!")
    } else {
        add_failed("Instance as Parameter: Failed!")
    }

    dog_factory: () -> Dog = () -> Dog {
        d: Dog = Dog()
        d.age = 100
        -> d
    }
    dog_factoryi := () -> Dogi {
        d := Dogi()
        d.agei = 100
        -> d
    }
    if dog_factory().age == 100 and dog_factoryi().agei == 100 {
        add_passed("Instance as Return: Passed!")
    } else {
        add_failed("Instance as Return: Failed!")
    }

}

if native_functions {
    
    print("-Native Functions")
    a: float = clock()
    if a > -1.0 {
        add_passed("clock(): Passed!")
    } else {
        add_failed("clock(): Failed!")
    }
}

if lists {
    
    print("-Lists")
    a: List<int> = List<int>()

    if a.size == 0 {
        add_passed("Initialize List: Passed!")
    } else {
        add_failed("Initialize List: Failed!")
    }

    a[0] = 0
    a[1] = 1
    a[0] = 10

    if a.size == 2 and a[0] == 10 and a[1] == 1 {
        add_passed("Setting Value: Passed!")
    } else {
        add_failed("Setting Value: Failed!")
    }

    a.size = 0
    if a.size == 0 {
        add_passed("Setting size to Zero: Passed!")
    } else {
        add_failed("Setting size to Zero: Failed!")
    }

    a.size = 2
    if a.size == 2 and a[0] == nil and a[1] == nil {
        add_passed("Set Higher Size / Fill with Default: Passed!")
    } else {
        add_failed("Set Higher Size / Fill with Default: Failed!")
    }

    a[10] = 10
    if a.size == 11 and a[10] == 10 and a[9] == nil {
        add_passed("Set Higher Index / Fill with Default: Passed!")
    } else {
        add_failed("Set Higher Index / Fill with Default: Failed!")
    }

    a[5] = 33
    if a.size == 11 and a[10] == 10 and a[9] == nil and a[5] == 33 {
        add_passed("Set Lower Index: Passed!")
    } else {
        add_failed("Set Lower Index: Failed!")
    }


    Dog: struct = struct {
        name: string = "Mittens"
        age: int = 5
    }

    b: List<Dog> = List<Dog>()
    d: Dog = Dog()
    d.name = "Bubbles"
    b[0] = d
    b.size = 2

    if b[0].name == "Bubbles" and b[1] == nil {
        add_passed("Structs in List: Passed!")
    } else {
        add_failed("Structs in List: Failed!")
    }

}

if in_keyword {
    
    print("-In Keyword")
    list: List<int> = List<int>()

    if !(10 in list) {
        add_passed("Empty Int List: Passed!")
    } else {
        add_failed("Empty Int List: Failed!")
    } 

    list[list.size] = 1
    list[list.size] = 2

    if 2 in list {
        add_passed("Int List: Passed!")
    } else {
        add_failed("Int List: Failed!")
    }
}

if maps {
    
    print("-Maps")
    map: Map<int> = Map<int>()

    if map["two"] == nil {
        add_passed("Invalid Key: Passed!")
    } else {
        add_failed("Invalid Key: Failed!")
    }

    if !("two" in map.keys) {
        add_passed("Map Keys List: Passed!")
    } else {
        add_failed("Map Keys List: Failed!")
    }

    map["one"] = 1
    map["dog"] = 123

    if map["one"] == 1 and map["dog"] == 123 {
        add_passed("Access: Passed!")
    } else {
        add_failed("Access: Failed!")
    }

    map["one"] = 3

    if map["one"] == 3 {
        add_passed("Set Value: Passed!")
    } else {
        add_failed("Set Value: Failed!")
    }

    if map.values.size == 2 and map.keys.size == 2 {
        add_passed("Value and Key List Sizes: Passed!")
    } else {
        add_failed("Value and Key List Sizes: Failed!")
    }
}

if nils_for_instances {
    
    print("-Nils For Instances")

    Dog: struct = struct {
        name: string = "Bubbles"
        age: int = 2
        friend: Dog = nil
    }

    dog0: Dog = Dog()
    dog1: Dog = Dog()
    dog1.name = "Mittens"
    dog2: Dog = Dog()
    dog2.name = "Boxy"
    dog0.friend = dog1
    dog1.friend = dog2
    dog_nil: Dog = nil

    if dog0.friend.friend.friend == nil and dog_nil == nil{
        add_passed("Initialized to Nil: Passed!")
    } else {
        add_failed("Initialized to Nil: Failed!")
    }

    if dog0.friend.friend.name == dog1.friend.name {
        add_passed("Instance Inside Instance: Passed!")
    } else {
        add_failed("Instance Inside Instance: Failed!")
    }

    dog0 = nil
    if dog0 == nil {
        add_passed("Set Instance to Nil: Passed!")
    } else {
        add_failed("Set Instance to Nil: Failed!")
    }
}

if struct_inheritance{
    
    print("-Struct Inheritance")

    Animal: struct = struct {
        class: string = "Mammal"
    }

    Bird: struct < Animal = struct < Animal {
        class: string = "Avian"
    }

    Zebra: struct < Animal = struct < Animal {
        name: string = "adfs"
    }

    bird: Bird = Bird()
    zebra: Zebra = Zebra()

    if bird.class == "Avian" {
        add_passed("Overwrite property: Passed!")
    } else {
        add_failed("Overwrite property: Failed!")
    }

    if zebra.class == "Mammal" {
        add_passed("Inherit property: Passed!")
    } else {
        add_failed("Inherit property: Failed!")
    }

}

if duck_typing {

    
    print("-Duck Typing")
    Animal: struct = struct {
        class: string = "Mammal"
    }

    Bird: struct < Animal = struct < Animal {
        class: string = "Avian"
        name: string = "Flappy"
    }

    fun: (Animal) -> = (a: Animal) -> {
        a.class = "Reptile"
    }

    make_bird: () -> Animal = () -> Animal {
        b: Bird = Bird()
        -> b
    }


    a: Bird = Bird()
    fun(a)

    if a.name == "Flappy" and a.class == "Reptile" {
        add_passed("Function Modify Struct Instance: Passed!")
    } else {
        add_failed("Function Modify Struct Instance: Failed!")
    }

    if make_bird().class == "Avian" {
        add_passed("Return Substruct: Passed!")
    } else {
        add_failed("Return Substruct: Failed!")
    }

}


if cast_to_string{
    print("-Cast to String")
    if string(true) == "true" and string(false) == "false" {
        add_passed("Cast Boolean to String: Passed!")
    } else {
        add_failed("Cast Boolean to String: Failed!")
    }

    if string(nil) == "nil" {
        add_passed("Cast Nil to String: Passed!")
    } else {
        add_passed("Cast Nil to String: Failed!")
    }

    a: bool = string(0) == "0"
    b: bool = string(-1) == "-1"
    c: bool = string(1) == "1"
    d: bool = string(9000111000111000111) == "9000111000111000111"
    e: bool = string(-9000111000111000111) == "-9000111000111000111"

    if a and b and c and d and e {
        add_passed("Cast Int to String: Passed!")
    } else {
        add_passed("Cast Int to String: Failed!")
    }
}

if for_each_loop {
    print("-For Each Loop")

    a := List<int>()
    for i := 0, i < 10, i = i + 1 {
        a[i] = 1
    }

    sum := 0
    foreach i: int in a {
        sum = sum + i
    }

    if sum == 10 {
        add_passed("For Each with Int List: Passed!")
    } else {
        add_failed("For Each with Int List: Failed!")
    }

    map := Map<int>()
    map["one"] = 1
    map["two"] = 2

    out := "" 
    foreach i: string in map.keys {
        out = out + i
    }
    map_sum := 0
    foreach i: int in map.values {
        map_sum = map_sum + i
    }
    if (out == "onetwo" or out == "twoone") and map_sum == 3 {
        add_passed("For Each with Map Keys/Values: Passed!")
    } else {
        add_failed("For Each with Map Keys/Values: Failed!")
    }
}

if get_set_char {
    print("-Get / Set Char in String")

    a := "Hello world!"
    if a[0] == "H" and a[11] == "!" {
        add_passed("Get Char: Passed!")
    } else {
        add_failed("Get Char: Failed!")
    }

    a[5] = "&"
    if a == "Hello&world!" {
        add_passed("Set Char: Passed!")
    } else {
        add_failed("Set Char: Failed!")
    }

    if (a[5] = "$") == "$" and a == "Hello$world!" {
        add_passed("Set Char, Char result: Passed!")
    } else {
        add_failed("Set Char, Char result: Failed!")
    }


    Dog := struct {
        name := "Mittens"
        friend: Dog = nil
    }

    dog1 := Dog()
    dog2 := Dog()
    dog1.friend = dog2
    dog1.friend.name = "Bubbles"

    if dog1.name[0] == "M" and dog1.friend.name[0] == "B" {
        add_passed("Get Char When String is Property: Passed!")
    } else {
        add_failed("Get Char When String is Property: Failed!")
    }

    dog1.name[0] = "S"
    dog1.friend.name[0] = "H"

    if dog1.name == "Sittens" and dog1.friend.name == "Hubbles" {
        add_passed("Set Char When String is Property: Passed!")
    } else {
        add_failed("Set Char When String is Property: Failed!")
    } 
}

if set_string_size {
    print("-Set String Size")

    a := "Hello world!"

    a.size = 5
    if a == "Hello" {
        add_passed("Set String Size, Smaller: Passed!")
    } else {
        add_failed("Set String Size, Smaller: Failed!")
    }

    a.size = 8
    if a == "Hello   " {
        add_passed("Set String Size, Larger: Passed!")
    } else {
        add_failed("Set String Size, Larger: Failed!")
    }

    Dog := struct {
        name := "Mittens"
        friend: Dog = nil
    }

    dog1 := Dog()
    dog2 := Dog()
    dog1.friend = dog2

    dog1.name.size = 1
    dog1.friend.name.size = 3
    if dog1.name == "M" and dog1.friend.name == "Mit" {
        add_passed("Set String Size Smaller When String is Property: Passed!")
    } else {
        add_failed("Set String Size Smaller When String is Property: Failed!")
    }

    dog1.name.size = 4
    dog1.friend.name.size = 4
    if dog1.name == "M   " and dog1.friend.name == "Mit " {
        add_passed("Set String Size Larger When String is Property: Passed!")
    } else {
        add_failed("Set String Size Larger When String is Property: Failed!")
    }
}

if lists_maps_in_structs {
    print("-Lists / Maps in Structs")

    Dog := struct {
        name := "Mittens"
        friend: Dog = nil
        list := List<int>()
        map := Map<int>()
    }

    dog := Dog()
    dog1 := Dog()
    dog1.name = "Bubbles"
    dog.friend = dog1

    dog.map["one"] = 1
    dog.map["two"] = 343
    dog.friend.map["one"] = 2232

    if dog.map.keys.size == 2 and dog.friend.map.keys.size == 1 {
        add_passed("Maps Are Unique in Struct Instances: Passed!")
    } else {
        add_failed("Maps Are Unique in Struct Instances: Failed!")
    }


    dog.list[0] = 0
    dog.list[1] = 1
    dog1.list[0] = 0

    if dog.list.size == 2 and dog.friend.list.size == 1 {
        add_passed("Lists Are Unique in Struct Instances: Passed!")
    } else {
        add_failed("Lists Are Unique in Struct Instances: Failed!")
    }
}


if enums {
    print("-Enums")
    Token := enum {
        plus
        minus
        star
        slash
    }

    a: Token = Token.plus
    ai := Token.plus

    if a == Token.plus and ai == Token.plus {
        add_passed("Assigning Variables to Enum Constant: Passed!")
    } else {
        add_failed("Assigning Variables to Enum Constant: Failed!")
    }

    b: Token = Token.minus
    bi := Token.minus
    b = Token.plus
    bi = Token.plus
    if a == b and ai == bi {
        add_passed("Reassigning Variables to Enum Constant: Passed!")
    } else {
        add_failed("Reassigning Variables to Enum Constant: Failed!")
    }
}

print("----------------------------------")
print("Total Tests:")
print(passed.size + failed.size)
print("Passed:")
print(passed.size)
//for i := 0, i < passed.size, i = i + 1 {
//    print(passed[i])
//}
print("Failed:")
print(failed.size)
for i := 0, i < failed.size, i = i + 1 {
    print(failed[i])
}
