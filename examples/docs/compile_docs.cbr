dir := "C:\\dev\\cebra\\examples\\docs\\"

//combine html files

f := open(dir + "cebra_docs.html")

out := open(dir + "compiled_docs.html")
clear(out)

while !eof(f) {
    s := read_line(f)
    if s.size > 0 and s[0] == "$"{
        about_f := open(dir + s[1, s.size])
        about_s := read_all(about_f)
        append(out, about_s + "\n")
        close(about_f)
    } else {
        append(out, s + "\n")
    } 
}

close(f)
close(out)

//highlight compiled_docs.html

f = open(dir + "compiled_docs.html")
out = open(dir + "final_docs.html")
clear(out)

code_block := false
while !eof(f) {
    line := read_line(f)

    if start_code(line)    code_block = true
    if end_code(line)      code_block = false

    if code_block {
        line = highlight_line(line)
    }

    append(out, line + "\n")
}

close(f)
close(out)

Mode :: enum {
    STRING
    COMMENT
    IDENTIFIER
    NUMBER
    NONE
}

Highlight :: struct {
    start := -1
    end := -1
    color := ""
}

is_alpha_numeric :: (s: string) -> (bool) {
    -> is_alpha(s) or is_digit(s) or s == "_"
}

highlight_line :: (s: string) -> (string) {

    keywords := Map<bool>()
    keywords["for"] = true
    keywords["foreach"] = true
    keywords["if"] = true
    keywords["while"] = true
    keywords["else"] = true
    keywords["when"] = true
    keywords["is"] = true
    keywords["struct"] = true
    keywords["enum"] = true
    keywords["import"] = true
    keywords["as"] = true
    keywords["in"] = true

    keywords["int"] = true
    keywords["float"] = true
    keywords["string"] = true
    keywords["bool"] = true
    keywords["File"] = true
    keywords["List"] = true
    keywords["Map"] = true

    keywords["clock"] = true
    keywords["print"] = true
    keywords["open"] = true
    keywords["close"] = true
    keywords["read_all"] = true
    keywords["read_line"] = true
    keywords["rewind"] = true
    keywords["clear"] = true
    keywords["eof"] = true
    keywords["append"] = true
    keywords["write"] = true
    keywords["input"] = true

    constants := Map<bool>()
    constants["true"] = true
    constants["false"] = true
    constants["nil"] = true

    //loop through string once and create Highlight objects and put it into a
    //list.  At the end, loop through the list and apply the css tags
    mode := Mode.NONE
    start := -1
    end := -1
    dq := "\""[1, 2]

    highlights := List<Highlight>()
    highlights.size = 0

    i := 0
    while i < s.size {
        when mode {
            is Mode.NONE {
                //checking for ':' to avoid highlighting github address
                if i > 0 and s[i-1] == "/" and s[i] == "/" and i > 1 and s[i-2] != ":" {
                    h := Highlight()
                    h.start = i - 1
                    h.end = s.size - 1
                    h.color = "gr"
                    highlights[highlights.size] = h
                    //highlights.size = highlights.size + 1
                    i = s.size - 1 //skipping remainder of string
                }
                if s[i] == dq {
                    mode = Mode.STRING
                    start = i
                }
                if is_alpha(s[i]) {
                    mode = Mode.IDENTIFIER
                    start = i
                }
                if is_digit(s[i]) {
                    mode = Mode.NUMBER
                    start = i
                }
            }
            is Mode.STRING {
                if s[i] == dq {
                    mode = Mode.NONE
                    h := Highlight()
                    h.start = start
                    h.end = i
                    h.color = "re"
                    highlights[highlights.size] = h
                    //highlights.size = highlights.size + 1
                } 
            }
            is Mode.IDENTIFIER {
                if i == s.size - 1 or s[i + 1] == " " or !is_alpha_numeric(s[i + 1]) {
                    mode = Mode.NONE
                    if s[start, i + 1] in keywords.keys {
                        h := Highlight()
                        h.start = start
                        h.end = i
                        h.color = "bl"
                        highlights[highlights.size] = h
                    }

                    if s[start, i + 1] in constants.keys {
                        h := Highlight()
                        h.start = start
                        h.end = i
                        h.color = "gr"
                        highlights[highlights.size] = h
                    }
                }
            }
            is Mode.NUMBER {
                if i == s.size - 1 or s[i + 1] == " " or !(is_digit(s[i + 1]) or s[i+1] == ".") {
                    mode = Mode.NONE
                    h := Highlight()
                    h.start = start
                    h.end = i
                    h.color = "gr"
                    highlights[highlights.size] = h
                }
            }
        }
        i = i + 1
    }


    {
        result := ""
        start := 0
        for i := 0, i < highlights.size, i = i + 1 {
            result = result + s[start, highlights[i].start] + "<span class=\"" + highlights[i].color + "\">" + s[highlights[i].start, highlights[i].end + 1] + "</span>"
            start = highlights[i].end + 1
        }
        -> result + s[start, s.size]
    }
}


start_code :: (s: string) -> (bool) {
  trimmed := remove_starting_whitespace(s)
  -> trimmed.size >= 6 and trimmed[0, 6] == "<code>"
}

end_code :: (s: string) -> (bool) {
  trimmed := remove_starting_whitespace(s)
  -> trimmed.size >= 7 and trimmed[0, 7] == "</code>"
}

remove_starting_whitespace :: (s: string) -> (string) {
    i := 0
    while i < s.size - 1 and s[i] == " " {
        i = i + 1
    }
    -> s[i,s.size]
}
