//Parser

parse_tokens :: (tokens: List<Token>) -> (Expr) {
    parser := Parser()
    parser.tokens = tokens
    parser.current_token = parser.tokens[parser.index]
    -> parse_expression(parser)
}

Parser :: struct {
    tokens: List<Token> = List<Token>()
    index := 0
    previous_token: Token = nil
    current_token: Token = nil 
}

advance :: (parser: Parser) -> () {
    parser.previous_token = parser.current_token
    parser.index = parser.index + 1
    parser.current_token = parser.tokens[parser.index]
}

match :: (parser: Parser, type: TokenType) -> (bool) {
    if type == parser.current_token.type {
        advance(parser)
        -> true
    }
    -> false
}

Expr :: struct {
    token: Token = nil
}

PrimaryExpr :: struct < Expr { 
}


BinaryExpr :: struct < Expr { 
    left: Expr = nil
    right: Expr = nil
}

make_primary_expr :: (token: Token) -> (Expr) {
    primary := PrimaryExpr()
    primary.token = token
    -> primary as Expr
}

make_binary_expr :: (token: Token, left: Expr, right: Expr) -> (Expr) {
    binary := BinaryExpr()
    binary.token = token
    binary.left = left
    binary.right = right
    -> binary as Expr
}

parse_primary :: (parser: Parser) -> (Expr) {
    if match(parser, TokenType.number) {
        -> make_primary_expr(parser.previous_token)
    }

    if match(parser, TokenType.left_paren) {
        expr := parse_expression(parser)
        match(parser, TokenType.right_paren)
        -> expr
    }
}

parse_factor :: (parser: Parser) -> (Expr) {
    left := parse_primary(parser)

    while match(parser, TokenType.star) or match(parser, TokenType.slash) {
        left = make_binary_expr(parser.previous_token, left, parse_primary(parser))
    }

    -> left
}

parse_term :: (parser: Parser) -> (Expr) {
    left := parse_factor(parser)

    while match(parser, TokenType.plus) or match(parser, TokenType.minus) {
        left = make_binary_expr(parser.previous_token, left, parse_factor(parser))
    }

    -> left
}

parse_expression :: (parser: Parser) -> (Expr) {
    -> parse_term(parser)
}

string_expr :: (expr: Expr) -> (string) {
    if expr as PrimaryExpr != nil {
        -> " " + expr.token.literal + " "
    }

    if expr as BinaryExpr != nil {
        b := expr as BinaryExpr
        -> "( " + expr.token.literal + " " + string_expr(b.left) + string_expr(b.right) + " )"
    }
}

