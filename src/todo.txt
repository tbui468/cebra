DOCUMENTATION:
    Look at how Nystrom design docs for Wren
    The embedded compiler/vm in browser is neat

ADDING FEATURES:
    Add correctness tests for new features
    Pass all correctness.cbr tests
    Check that ALL memory is freed if GC is called at end of main()
    TODO: need a way to test type checking

IMPLEMENTATION:

        table in class decl/def are both not printing correctly in compiler.c
            in NODE_INST_CLASS.
            what should be inside these tables?  Properties.
            FOUND IT!  The keys are being swept by GC - confirmed:
                it works find if DEBUG_STRESS_GC is off
                this table is being stored in SigClass inside locals/upvalues in compiler
                go throught Signatures and mark any SigClass tables

        Get instances working when class is an upvalue
            why is there allocated memory remaining at end
            when instance is created inside a function?

        Implement OP_INSTANCE in vm
            For ObjInstance, just find the correct class and copy
                the table over (ObjString* can be just a pointer copy, but
                Value should be a deep copy).  Might be a good idea to intern 
                strings before this.  Have VM (or Memory Manager) keep a Table of
                ObjString*, and reuse them

        Do classes and class instances work with upvalues?????
            not using them in compiler.c

        copy_value(Value* value) - 
            add functions/classes/instances for better class instances

        Implement getting and setting properties using dot syntax for instances

        Inheritance syntax and implementation
            fill out the rest of copy_value(Value* value) for class methods

    Does NODE_DECl_VAR only for primitive types, or is it for functions/classes too?

    How about assigning functions to other functions?
        I don't think we support this right now:
        my_fun: () -> = other_fun

    Allow shorthand for declaration types:
        a := 1
        b := "dogg"
        c := () -> int {
            -> 3
        }
        Dog := class {
            name := "Mittens"
        }

    Clear up the warnings (especially with switch statements)

    String Interning

    When a function returns, it closes any upvalues, but we don't
        see the call to OP_CLOSE_UPVALUE - need to add more instructions to
        disassemble chunk OR somehow make returning from a function call
        OP_CLOSE_UPVALUE for clarity.  Is there any situation where
        OP_CLOSE_UPVALUE actually gets called (rather than OP_RETURN 
        just doing all the work?)

    in compiler, CALL and CASCADE CALL share a lot of code - pull that into a function

    Native functions - start with clock() for measuring time
        should have an OP_CALL_NATIVE code

    Having to call free_sig on almost all signatures in compile_node is a bit much
      and super prone to errors.  How about putting all Sig* into a list upon
      creation, and then just free that list when the compilation process is over?
        this is similar to how we deal with freeing Objects with the GC

    Implement deleting from hash table - need to use tombstones

    Intern strings - create a "strings" table in vm

    Test Edge cases by writing toy programs - save these programs as correctness tests

    Stress test by writing script to load nyc_subway data - compare runtime to python pandas

    Write benchmarking code to use with chrome://tracing to find hotspots

    Why are if /else so much slower than just if (think of the fibonacci example


StatementList should be DeclList - all programs are a list of declarations
  decl - classDecl | funDecl | varDecl | stmt
      leave no effect on the stack
  stmt - exprStmt | forStmt | ifStmt | printStmt | returnStmt | whileStmt | block
      exprStmt are expressions where the result is discarded (pop the stack)
  expr - Literal | Unary | Binary | SetVar | GetVar
      push one value on the stack


