TODO:  There's no way around using upvalues - will need to implement them for core functionality

    Redo system so that we only use local variables again for everything (both primitive types
        and functions).  Get all the original tests (with return functions and cascading function
        calls) working again.  Clean up any code necessary.
        On the plus side, we have working hash tables now.

    Write some basic programs (that don't require closures) to hammer out bugs before we continue with upvalues.

    Implement upvalues step by step - just make them work for locals in the immediately enclosing
        function first.
    
  Get NODE_CASCADE working again - which should be easy if the above stuff works correctly
      NODE_CASCADE and returning functions from functions not working now with new
      format.  How could be get this to work?  If a function is returned, we could
        then just add that to the defs table of the current compiler.  This works at
        runtime, but will this be okay at compiletime????  If functions are passed
        up the chain, they're seen as local variables. 

        making them locals causes own problems:  identifiers look the same for both
        functions and primitive types - there's no way to differentiate now

        allow passing of function literals only?  But that seems inconsistent

        the only option is to implement closures and then allow access to 
        EVERYTHING outside a function body

        There's no way around this unless we allow function pointers to be passed around
        but the entire goal is to NOT use pointers

        then the entire defs system needs to be rewritten again.  We dont' even needs globals,
        just locals again.  Then upvalues will be needed.  

    Intern strings - have vm hold a table of ObjString*/ObjString* (value) so that copies of
        strings aren't created.  Interning can be done at both compile and runtime.
        Just put some code inside make_string/take_string so that it doesn't
        add a new key/value pair if if the key already exists in the table.

  Get NODE_CLASS working with new defs table - in call frames
      should just need to use OP_SET/GET_DEF since they all use Values

  OP_INSTANCE in vm.c needs to be completed - look at notes in vm.c OP_INSTANCE
     basic problem: how to go from ObjClass -> Table necessary for instance?

  MONDAY
  Make ObjInstance for storing instances
  Add ObjInstance* to Value and any supporting functions
  Check that sample class compiles
  Make Table (hash table) for instances to store class fields and methods
  Make dot notation work for getting/setting instance fields
  Make methods callable using dot notation

  Make NODE_DECL_CLASS (should take in Token name, and NodeList props)
  test to see if it compiles
  dot notation for OP_GET_PROP, OP_SET_PROP
  Classes
      Don't really need a closure, right? - Yes we do.  Since the class methods need to see instance fields
      will need a hash table for struct properties
      will need ObjInstance (each one should have own hash table)

      Class declaration
          Dog :: class {
              a: int = 5
              Dog :: () -> this {

              }
              b :: () -> {
                  print a
              }
          }

  Struct Getters and Setters
      including type checking

  Clear up the warnings (especially with switch statements) before doing garbage collection

  in compiler, CALL and CASCADE CALL share a lot of code - pull that into a function

  Having to call free_sig on almost all signatures in compile_node is a bit much
      and super prone to errors

  Garbage Collection - need to keep linked list of all allocated objects (in vm makes the most sense)
      add code inside memory.h - all allocations should go through there
      mark and sweep or reference counting?

  Closures - nested functions and structs won't work unless these are implemented

  Implement deleting from hash table - need to use tombstones

  Intern strings - create a "strings" table in vm

  Test Edge cases by writing toy programs - save these programs as correctness tests

  Stress test by writing script to load nyc_subway data - compare runtime to python pandas

  Write benchmarking code to use with chrome://tracing to find hotspots

  Why are if /else so much slower than just if (think of the fibonacci example




StatementList should be DeclList - all programs are a list of declarations
  decl - classDecl | funDecl | varDecl | stmt
      leave no effect on the stack
  stmt - exprStmt | forStmt | ifStmt | printStmt | returnStmt | whileStmt | block
      exprStmt are expressions where the result is discarded (pop the stack)
  expr - Literal | Unary | Binary | SetVar | GetVar
      push one value on the stack


