DOCUMENTATION:
    Look at how Nystrom design docs for Wren
    The embedded compiler/vm in browser is neat

ADDING FEATURES:
    Add correctness tests for new features
    Pass all correctness.cbr tests
    Check that ALL memory is freed if GC is called at end of main()
    TODO: need a way to test type checking

IMPLEMENTATION:

    methods in classes can't see fields (name, age, etc) during method compilation
        and is adding error.  Could make each class its own compiler so that
        methods capture the environment - would that still work with instances?
        wouldn't the upvalues need to be copied too?

        Or add this keyword (this.name, this.age, etc)

        Or have an extra field in function called type that specifies
            if the function is a regular function or a method. If it's a method,
            if a method, then looking for identifier goes as follows:
                look in locals for identifier
                look in instance properties for identifier

    add methods
        copy_value(Value* value) - 
            add functions/classes/instances for better class instances

    Inheritance syntax and implementation
        fill out the rest of copy_value(Value* value) for class methods

    Native functions - where should they be defined?

    moving classes, instances and functions around by assigning them
    to variables is not currently supported.

        //Functions
        a: () -> = () -> {
            print "hi"
        }

        b: () -> = a

        a() //should print the same thing as b()
        b() //should print the same thing as a()

        //Classes
        Dog: class = class {
            name: string = "Mittens"
        }

        Dog2: class = Dog
        d: Dog2 = Dog2() //same as Dog()

        //Instances
        dog1: Dog = Dog()
        dog2: Dog = dog1 (point to same instance)
        dog3: Dog = copy(dog1) (create a copy)

    property names are being added as constants for both OP_GET_PROP
    and OP_SET_PROP, but they aren't really constants.  What other
    way could this be done more clearly.  Interning!!!

    Does NODE_DECl_VAR only for primitive types, or is it for functions/classes too?
        add ability to assign variables to classes, function, instances

        How about assigning functions to other functions?
            I don't think we support this right now:
            my_fun: () -> = other_fun

    Allow shorthand for declaration types:
        a := 1
        b := "dogg"
        c := () -> int {
            -> 3
        }
        Dog := class {
            name := "Mittens"
        }

    Clear up the warnings (especially with switch statements)

    String Interning

    When a function returns, it closes any upvalues, but we don't
        see the call to OP_CLOSE_UPVALUE - need to add more instructions to
        disassemble chunk OR somehow make returning from a function call
        OP_CLOSE_UPVALUE for clarity.  Is there any situation where
        OP_CLOSE_UPVALUE actually gets called (rather than OP_RETURN 
        just doing all the work?)

    in compiler, CALL and CASCADE CALL share a lot of code - pull that into a function

    Native functions - start with clock() for measuring time
        should have an OP_CALL_NATIVE code

    Having to call free_sig on almost all signatures in compile_node is a bit much
      and super prone to errors.  How about putting all Sig* into a list upon
      creation, and then just free that list when the compilation process is over?
        this is similar to how we deal with freeing Objects with the GC

    Implement deleting from hash table - need to use tombstones

    Intern strings - create a "strings" table in vm

    Test Edge cases by writing toy programs - save these programs as correctness tests

    Stress test by writing script to load nyc_subway data - compare runtime to python pandas

    Write benchmarking code to use with chrome://tracing to find hotspots

    Why are if /else so much slower than just if (think of the fibonacci example


StatementList should be DeclList - all programs are a list of declarations
  decl - classDecl | funDecl | varDecl | stmt
      leave no effect on the stack
  stmt - exprStmt | forStmt | ifStmt | printStmt | returnStmt | whileStmt | block
      exprStmt are expressions where the result is discarded (pop the stack)
  expr - Literal | Unary | Binary | SetVar | GetVar
      push one value on the stack


