TODO:  There's no way around using upvalues - will need to implement them for core functionality

    Why isn't OP_CLOSE_UPVALUE showing up in trace?  Try printing disassebly of all functions
        to see.  Could it be because function body is parsed as a block()?  And then 
        it's added to the parameter node_list for compilation. But isn't the OP_CLOSE_UPVALUE
        being emitted?

        If it's really because returning from a function calls close_upvalue on all open
        upvalues, think of some code using scopes where OP_CLOSE_UPVALUE is called by itself

    Replace OP_INT, OP_FLOAT, OP_STRING, with just OP_CONSTANT since they all
        just grab values from the constants table at runtime, so the code is all the same

    Read about Garbage collection again and take notes:
    
    Intern strings - have vm hold a table of ObjString*/ObjString* (value) so that copies of
        strings aren't created.  Interning can be done at both compile and runtime.
        Just put some code inside make_string/take_string so that it doesn't
        add a new key/value pair if if the key already exists in the table.

    Get NODE_CLASS working with new defs table - in call frames
      should just need to use OP_SET/GET_DEF since they all use Values

    OP_INSTANCE in vm.c needs to be completed - look at notes in vm.c OP_INSTANCE
     basic problem: how to go from ObjClass -> Table necessary for instance?

  MONDAY
  Make ObjInstance for storing instances
  Add ObjInstance* to Value and any supporting functions
  Check that sample class compiles
  Make Table (hash table) for instances to store class fields and methods
  Make dot notation work for getting/setting instance fields
  Make methods callable using dot notation

  Make NODE_DECL_CLASS (should take in Token name, and NodeList props)
  test to see if it compiles
  dot notation for OP_GET_PROP, OP_SET_PROP
  Classes
      Don't really need a closure, right? - Yes we do.  Since the class methods need to see instance fields
      will need a hash table for struct properties
      will need ObjInstance (each one should have own hash table)

      Class declaration
          Dog :: class {
              a: int = 5
              Dog :: () -> this {

              }
              b :: () -> {
                  print a
              }
          }

  Struct Getters and Setters
      including type checking

  Clear up the warnings (especially with switch statements) before doing garbage collection

  in compiler, CALL and CASCADE CALL share a lot of code - pull that into a function

  Having to call free_sig on almost all signatures in compile_node is a bit much
      and super prone to errors

  Garbage Collection - need to keep linked list of all allocated objects (in vm makes the most sense)
      add code inside memory.h - all allocations should go through there
      mark and sweep or reference counting?

  Closures - nested functions and structs won't work unless these are implemented

  Implement deleting from hash table - need to use tombstones

  Intern strings - create a "strings" table in vm

  Test Edge cases by writing toy programs - save these programs as correctness tests

  Stress test by writing script to load nyc_subway data - compare runtime to python pandas

  Write benchmarking code to use with chrome://tracing to find hotspots

  Why are if /else so much slower than just if (think of the fibonacci example




StatementList should be DeclList - all programs are a list of declarations
  decl - classDecl | funDecl | varDecl | stmt
      leave no effect on the stack
  stmt - exprStmt | forStmt | ifStmt | printStmt | returnStmt | whileStmt | block
      exprStmt are expressions where the result is discarded (pop the stack)
  expr - Literal | Unary | Binary | SetVar | GetVar
      push one value on the stack


