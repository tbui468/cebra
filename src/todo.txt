DOCUMENTATION:
    Look at how Nystrom design docs for Wren
    The embedded compiler/vm in browser is neat
        look at using emscripten to compiler to webassembly

ADDING FEATURES:
    Add correctness tests for new features
    Check that ALL memory is freed if GC is called at end of main()
    Add more native functions - add way to import native functions
    TODO: need a way to test type checking

IMPLEMENTATION:

    struct ObjArray {
        Value* values;
        Value default;
        int count;
        int capacity;
    };

    That should be left to the DeclVar (left side)
        and GetVar (right side) and Call (right side)
        we need to do this since template type needs to be specified
        create an ObjList in Call of correct type + default
        emit VAL_TYPE
        emit default value
        emit OP_LIST (which pops the above two to create ObjList)

    use a[0] = 8 for getting/setting list values
    use a[-1] to access from end
    runtime error if trying to access out of bounds
    a.length (or size) returns an int
    a.length = 10 will increase array size (filling with default value)
        or remove values from end of array

    will need to have GC trace references in ObjList

    Implement a stack in cebra using List + structs to test

    for n: string in list {
        
    }

    Allow shorthand for declaration types:
        a := 1
        b := "dogg"
        c := () -> int {
            -> 3
        }
        Dog := class {
            name := "Mittens"
        }

    When compile_node() is called, should check if return value is NULL
        make all errors return NULL, rather than a signature of type NIL
        NIL type signatures are valid, whereas NULL will signal an error

    find python native function list (for early python versions)
        and add those functions

    Allow struct instantiation to have arguments that set fields
        by order of declaration.  Use must include all arguments, but
        may leave them empty if the default value is desired

        Dog: struct = struct {
            name: string = "Mittens"
            age: int = 3
            length: float = 12.3
        }

        Dog("Bubbles", 23, 1.32)
        Dog(, 23, 1.32)
        Dog(,,) is the same as Dog()

    property names are being added as constants for both OP_GET_PROP
    and OP_SET_PROP, but they aren't really constants.  What other
    way could this be done more clearly.  Interning!!!

    Does NODE_DECl_VAR only for primitive types, or is it for functions/classes too?
        add ability to assign variables to classes, function, instances

        How about assigning functions to other functions?
            I don't think we support this right now:
            my_fun: () -> = other_fun

    Clear up the warnings (especially with switch statements)

    String Interning

    When a function returns, it closes any upvalues, but we don't
        see the call to OP_CLOSE_UPVALUE - need to add more instructions to
        disassemble chunk OR somehow make returning from a function call
        OP_CLOSE_UPVALUE for clarity.  Is there any situation where
        OP_CLOSE_UPVALUE actually gets called (rather than OP_RETURN 
        just doing all the work?)

    in compiler, CALL and CASCADE CALL share a lot of code - pull that into a function

    Native functions - start with clock() for measuring time
        should have an OP_CALL_NATIVE code

    Having to call free_sig on almost all signatures in compile_node is a bit much
      and super prone to errors.  How about putting all Sig* into a list upon
      creation, and then just free that list when the compilation process is over?
        this is similar to how we deal with freeing Objects with the GC

    Implement deleting from hash table - need to use tombstones

    Intern strings - create a "strings" table in vm

    Test Edge cases by writing toy programs - save these programs as correctness tests

    Stress test by writing script to load nyc_subway data - compare runtime to python pandas

    Write benchmarking code to use with chrome://tracing to find hotspots

    Why are if /else so much slower than just if (think of the fibonacci example


StatementList should be DeclList - all programs are a list of declarations
  decl - classDecl | funDecl | varDecl | stmt
      leave no effect on the stack
  stmt - exprStmt | forStmt | ifStmt | printStmt | returnStmt | whileStmt | block
      exprStmt are expressions where the result is discarded (pop the stack)
  expr - Literal | Unary | Binary | SetVar | GetVar
      push one value on the stack


